[2017-11-07 17:14:44.085] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/users/login
request client ip:  ::ffff:127.0.0.1
request body: 
{"userName":"admin","password":"2017Dctm@1234"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"success\",\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MDg0LCJleHAiOjE1MTAwODkyODR9.Q0GAUvqCkydPBBLxMOs2msD4ZH0Ect5XW7dnONo8bvU\",\n    \"userName\": \"admin\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:15:46.530] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/users/login
request client ip:  ::ffff:127.0.0.1
request body: 
{"userName":"admin","password":"2017Dctm@1234"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"success\",\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MTQ2LCJleHAiOjE1MTAwODkzNDZ9.adWvOhR7eQbgym15UHD7mpW51B2RlRGwUcR6KBPtB4Q\",\n    \"userName\": \"admin\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:15:46.851] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MTQ2LCJleHAiOjE1MTAwODkzNDZ9.adWvOhR7eQbgym15UHD7mpW51B2RlRGwUcR6KBPtB4Q"}
response time: 6
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a0118474c4aea1b77651fd5\",\n      \"title\": \"测试111\",\n      \"content\": \"1122\",\n      \"author\": \"qichangjun\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"content\": \"dsdad\",\n          \"_id\": \"5a01284ccd447826016eeeba\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n        },\n        {\n          \"content\": \"哈哈哈哈\",\n          \"_id\": \"5a012bebcd447826016eeebb\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n        },\n        {\n          \"content\": \"vvvv\",\n          \"_id\": \"5a012bf4cd447826016eeebc\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n        },\n        {\n          \"userName\": \"admin\",\n          \"content\": \"fvdvdv\",\n          \"_id\": \"5a012c478e9c32270558459d\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"admin\",\n              \"content\": \"dwdwdw\",\n              \"_id\": \"5a01647102a6cb4f6e167dac\",\n              \"replyTime\": \"2017-11-07T07:44:49.203Z\"\n            },\n            {\n              \"userName\": \"admin\",\n              \"content\": \"ooo\",\n              \"_id\": \"5a0164f902a6cb4f6e167dad\",\n              \"replyTime\": \"2017-11-07T07:47:05.016Z\"\n            },\n            {\n              \"userName\": \"admin\",\n              \"content\": \"ooobbb\",\n              \"_id\": \"5a0164fe02a6cb4f6e167dae\",\n              \"replyTime\": \"2017-11-07T07:47:10.686Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T03:45:11.978Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccccccc\",\n          \"_id\": \"5a016fd402a6cb4f6e167db2\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a016fe702a6cb4f6e167db3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n        },\n        {\n          \"userName\": \"admin\",\n          \"content\": \"111\",\n          \"_id\": \"5a01728302a6cb4f6e167db4\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"admin\",\n              \"content\": \"222\",\n              \"_id\": \"5a01728702a6cb4f6e167db5\",\n              \"replyTime\": \"2017-11-07T08:44:55.937Z\"\n            },\n            {\n              \"userName\": \"admin\",\n              \"content\": \"333\",\n              \"_id\": \"5a01728b02a6cb4f6e167db6\",\n              \"replyTime\": \"2017-11-07T08:44:59.178Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T08:44:51.986Z\"\n        },\n        {\n          \"userName\": \"admin\",\n          \"_id\": \"5a01748d02a6cb4f6e167db7\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:53:33.709Z\"\n        },\n        {\n          \"userName\": \"admin\",\n          \"_id\": \"5a0174c202a6cb4f6e167db8\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:54:26.187Z\"\n        }\n      ],\n      \"viewed\": 194,\n      \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n    },\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"这是第一条回复\",\n          \"_id\": \"5a016ae602a6cb4f6e167db0\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"admin\",\n              \"content\": \"这是子回复\",\n              \"_id\": \"5a016aee02a6cb4f6e167db1\",\n              \"replyTime\": \"2017-11-07T08:12:30.063Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T08:12:22.825Z\"\n        }\n      ],\n      \"viewed\": 8,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:15:48.215] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a0118474c4aea1b77651fd5","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MTQ2LCJleHAiOjE1MTAwODkzNDZ9.adWvOhR7eQbgym15UHD7mpW51B2RlRGwUcR6KBPtB4Q"}
response time: 6
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0118474c4aea1b77651fd5\",\n    \"title\": \"测试111\",\n    \"content\": \"1122\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"content\": \"dsdad\",\n        \"_id\": \"5a01284ccd447826016eeeba\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n      },\n      {\n        \"content\": \"哈哈哈哈\",\n        \"_id\": \"5a012bebcd447826016eeebb\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n      },\n      {\n        \"content\": \"vvvv\",\n        \"_id\": \"5a012bf4cd447826016eeebc\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"fvdvdv\",\n        \"_id\": \"5a012c478e9c32270558459d\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"dwdwdw\",\n            \"_id\": \"5a01647102a6cb4f6e167dac\",\n            \"replyTime\": \"2017-11-07T07:44:49.203Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooo\",\n            \"_id\": \"5a0164f902a6cb4f6e167dad\",\n            \"replyTime\": \"2017-11-07T07:47:05.016Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooobbb\",\n            \"_id\": \"5a0164fe02a6cb4f6e167dae\",\n            \"replyTime\": \"2017-11-07T07:47:10.686Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T03:45:11.978Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccccccc\",\n        \"_id\": \"5a016fd402a6cb4f6e167db2\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a016fe702a6cb4f6e167db3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"111\",\n        \"_id\": \"5a01728302a6cb4f6e167db4\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"222\",\n            \"_id\": \"5a01728702a6cb4f6e167db5\",\n            \"replyTime\": \"2017-11-07T08:44:55.937Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"333\",\n            \"_id\": \"5a01728b02a6cb4f6e167db6\",\n            \"replyTime\": \"2017-11-07T08:44:59.178Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T08:44:51.986Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"_id\": \"5a01748d02a6cb4f6e167db7\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:53:33.709Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"_id\": \"5a0174c202a6cb4f6e167db8\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:54:26.187Z\"\n      }\n    ],\n    \"viewed\": 195,\n    \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:15:48.285] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a0118474c4aea1b77651fd5
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a0118474c4aea1b77651fd5"}
response time: 70
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0118474c4aea1b77651fd5\",\n    \"title\": \"测试111\",\n    \"content\": \"1122\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"content\": \"dsdad\",\n        \"_id\": \"5a01284ccd447826016eeeba\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n      },\n      {\n        \"content\": \"哈哈哈哈\",\n        \"_id\": \"5a012bebcd447826016eeebb\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n      },\n      {\n        \"content\": \"vvvv\",\n        \"_id\": \"5a012bf4cd447826016eeebc\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"fvdvdv\",\n        \"_id\": \"5a012c478e9c32270558459d\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"dwdwdw\",\n            \"_id\": \"5a01647102a6cb4f6e167dac\",\n            \"replyTime\": \"2017-11-07T07:44:49.203Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooo\",\n            \"_id\": \"5a0164f902a6cb4f6e167dad\",\n            \"replyTime\": \"2017-11-07T07:47:05.016Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooobbb\",\n            \"_id\": \"5a0164fe02a6cb4f6e167dae\",\n            \"replyTime\": \"2017-11-07T07:47:10.686Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T03:45:11.978Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccccccc\",\n        \"_id\": \"5a016fd402a6cb4f6e167db2\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a016fe702a6cb4f6e167db3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"111\",\n        \"_id\": \"5a01728302a6cb4f6e167db4\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"222\",\n            \"_id\": \"5a01728702a6cb4f6e167db5\",\n            \"replyTime\": \"2017-11-07T08:44:55.937Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"333\",\n            \"_id\": \"5a01728b02a6cb4f6e167db6\",\n            \"replyTime\": \"2017-11-07T08:44:59.178Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T08:44:51.986Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"_id\": \"5a01748d02a6cb4f6e167db7\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:53:33.709Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"_id\": \"5a0174c202a6cb4f6e167db8\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:54:26.187Z\"\n      }\n    ],\n    \"viewed\": 195,\n    \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:17:33.726] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/users/login
request client ip:  ::ffff:127.0.0.1
request body: 
{"userName":"admin","password":"2017Dctm@1234"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"success\",\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg\",\n    \"userName\": \"admin\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:17:33.944] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a0118474c4aea1b77651fd5\",\n      \"title\": \"测试111\",\n      \"content\": \"1122\",\n      \"author\": \"qichangjun\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"content\": \"dsdad\",\n          \"_id\": \"5a01284ccd447826016eeeba\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n        },\n        {\n          \"content\": \"哈哈哈哈\",\n          \"_id\": \"5a012bebcd447826016eeebb\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n        },\n        {\n          \"content\": \"vvvv\",\n          \"_id\": \"5a012bf4cd447826016eeebc\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n        },\n        {\n          \"userName\": \"admin\",\n          \"content\": \"fvdvdv\",\n          \"_id\": \"5a012c478e9c32270558459d\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"admin\",\n              \"content\": \"dwdwdw\",\n              \"_id\": \"5a01647102a6cb4f6e167dac\",\n              \"replyTime\": \"2017-11-07T07:44:49.203Z\"\n            },\n            {\n              \"userName\": \"admin\",\n              \"content\": \"ooo\",\n              \"_id\": \"5a0164f902a6cb4f6e167dad\",\n              \"replyTime\": \"2017-11-07T07:47:05.016Z\"\n            },\n            {\n              \"userName\": \"admin\",\n              \"content\": \"ooobbb\",\n              \"_id\": \"5a0164fe02a6cb4f6e167dae\",\n              \"replyTime\": \"2017-11-07T07:47:10.686Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T03:45:11.978Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccccccc\",\n          \"_id\": \"5a016fd402a6cb4f6e167db2\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a016fe702a6cb4f6e167db3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n        },\n        {\n          \"userName\": \"admin\",\n          \"content\": \"111\",\n          \"_id\": \"5a01728302a6cb4f6e167db4\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"admin\",\n              \"content\": \"222\",\n              \"_id\": \"5a01728702a6cb4f6e167db5\",\n              \"replyTime\": \"2017-11-07T08:44:55.937Z\"\n            },\n            {\n              \"userName\": \"admin\",\n              \"content\": \"333\",\n              \"_id\": \"5a01728b02a6cb4f6e167db6\",\n              \"replyTime\": \"2017-11-07T08:44:59.178Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T08:44:51.986Z\"\n        },\n        {\n          \"userName\": \"admin\",\n          \"_id\": \"5a01748d02a6cb4f6e167db7\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:53:33.709Z\"\n        },\n        {\n          \"userName\": \"admin\",\n          \"_id\": \"5a0174c202a6cb4f6e167db8\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:54:26.187Z\"\n        }\n      ],\n      \"viewed\": 195,\n      \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n    },\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"这是第一条回复\",\n          \"_id\": \"5a016ae602a6cb4f6e167db0\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"admin\",\n              \"content\": \"这是子回复\",\n              \"_id\": \"5a016aee02a6cb4f6e167db1\",\n              \"replyTime\": \"2017-11-07T08:12:30.063Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T08:12:22.825Z\"\n        }\n      ],\n      \"viewed\": 8,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:21:30.121] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 7
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"admin\",\n        \"content\": \"这是第一条回复\",\n        \"_id\": \"5a016ae602a6cb4f6e167db0\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"这是子回复\",\n            \"_id\": \"5a016aee02a6cb4f6e167db1\",\n            \"replyTime\": \"2017-11-07T08:12:30.063Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T08:12:22.825Z\"\n      }\n    ],\n    \"viewed\": 9,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:21:30.123] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a016ad702a6cb4f6e167daf
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a016ad702a6cb4f6e167daf"}
response time: 5
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"admin\",\n        \"content\": \"这是第一条回复\",\n        \"_id\": \"5a016ae602a6cb4f6e167db0\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"这是子回复\",\n            \"_id\": \"5a016aee02a6cb4f6e167db1\",\n            \"replyTime\": \"2017-11-07T08:12:30.063Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T08:12:22.825Z\"\n      }\n    ],\n    \"viewed\": 9,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:24:52.822] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"admin\",\n        \"content\": \"这是第一条回复\",\n        \"_id\": \"5a016ae602a6cb4f6e167db0\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"这是子回复\",\n            \"_id\": \"5a016aee02a6cb4f6e167db1\",\n            \"replyTime\": \"2017-11-07T08:12:30.063Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T08:12:22.825Z\"\n      }\n    ],\n    \"viewed\": 10,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:24:52.823] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a016ad702a6cb4f6e167daf
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a016ad702a6cb4f6e167daf"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"admin\",\n        \"content\": \"这是第一条回复\",\n        \"_id\": \"5a016ae602a6cb4f6e167db0\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"这是子回复\",\n            \"_id\": \"5a016aee02a6cb4f6e167db1\",\n            \"replyTime\": \"2017-11-07T08:12:30.063Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T08:12:22.825Z\"\n      }\n    ],\n    \"viewed\": 10,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:24:56.841] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/deleteReply
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a016ae602a6cb4f6e167db0","artId":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 0
response status: 200
response body: 
"{\n  \"code\": 0,\n  \"message\": \"error\"\n}"
*************** response log end ***************

[2017-11-07 17:27:23.882] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 60
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"admin\",\n        \"content\": \"这是第一条回复\",\n        \"_id\": \"5a016ae602a6cb4f6e167db0\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"这是子回复\",\n            \"_id\": \"5a016aee02a6cb4f6e167db1\",\n            \"replyTime\": \"2017-11-07T08:12:30.063Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T08:12:22.825Z\"\n      }\n    ],\n    \"viewed\": 11,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:27:23.895] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a016ad702a6cb4f6e167daf
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a016ad702a6cb4f6e167daf"}
response time: 61
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"admin\",\n        \"content\": \"这是第一条回复\",\n        \"_id\": \"5a016ae602a6cb4f6e167db0\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"这是子回复\",\n            \"_id\": \"5a016aee02a6cb4f6e167db1\",\n            \"replyTime\": \"2017-11-07T08:12:30.063Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T08:12:22.825Z\"\n      }\n    ],\n    \"viewed\": 11,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:27:25.886] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/deleteReply
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a016ae602a6cb4f6e167db0","artId":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 0,\n  \"message\": \"数据库错误\",\n  \"data\": \"ReferenceError: i is not defined\"\n}"
*************** response log end ***************

[2017-11-07 17:28:24.884] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/deleteReply
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a016ae602a6cb4f6e167db0","artId":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 19
response status: 200
response body: 
"{\n  \"code\": 0,\n  \"message\": \"数据库错误\",\n  \"data\": \"ReferenceError: reply is not defined\"\n}"
*************** response log end ***************

[2017-11-07 17:29:11.675] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/deleteReply
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a016ae602a6cb4f6e167db0","artId":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 29
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"删除成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [],\n    \"viewed\": 11,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:29:12.125] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a016ad702a6cb4f6e167daf
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a016ad702a6cb4f6e167daf"}
response time: 7
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [],\n    \"viewed\": 11,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:29:15.517] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/addReply
request client ip:  ::ffff:127.0.0.1
request body: 
{"content":"dwdw","id":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 8
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"admin\",\n        \"content\": \"dwdw\",\n        \"_id\": \"5a017ceb85031558a4aa775e\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:29:15.513Z\"\n      }\n    ],\n    \"viewed\": 11,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:29:15.527] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a016ad702a6cb4f6e167daf
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a016ad702a6cb4f6e167daf"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"admin\",\n        \"content\": \"dwdw\",\n        \"_id\": \"5a017ceb85031558a4aa775e\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:29:15.513Z\"\n      }\n    ],\n    \"viewed\": 11,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:29:17.456] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/deleteReply
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a017ceb85031558a4aa775e","artId":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"删除成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [],\n    \"viewed\": 11,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:29:17.955] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a016ad702a6cb4f6e167daf
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a016ad702a6cb4f6e167daf"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [],\n    \"viewed\": 11,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:30:10.356] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/addReply
request client ip:  ::ffff:127.0.0.1
request body: 
{"content":"wfwfw","id":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 31
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"admin\",\n        \"content\": \"wfwfw\",\n        \"_id\": \"5a017d22ec9e0358be71b6b0\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:30:10.341Z\"\n      }\n    ],\n    \"viewed\": 11,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:30:10.375] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a016ad702a6cb4f6e167daf
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a016ad702a6cb4f6e167daf"}
response time: 8
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"admin\",\n        \"content\": \"wfwfw\",\n        \"_id\": \"5a017d22ec9e0358be71b6b0\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:30:10.341Z\"\n      }\n    ],\n    \"viewed\": 11,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:30:12.601] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/deleteReply
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a017d22ec9e0358be71b6b0","artId":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 5
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"删除成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [],\n    \"viewed\": 11,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:30:13.033] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a016ad702a6cb4f6e167daf
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a016ad702a6cb4f6e167daf"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [],\n    \"viewed\": 11,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:30:17.485] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 7
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a0118474c4aea1b77651fd5\",\n      \"title\": \"测试111\",\n      \"content\": \"1122\",\n      \"author\": \"qichangjun\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"content\": \"dsdad\",\n          \"_id\": \"5a01284ccd447826016eeeba\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n        },\n        {\n          \"content\": \"哈哈哈哈\",\n          \"_id\": \"5a012bebcd447826016eeebb\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n        },\n        {\n          \"content\": \"vvvv\",\n          \"_id\": \"5a012bf4cd447826016eeebc\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n        },\n        {\n          \"userName\": \"admin\",\n          \"content\": \"fvdvdv\",\n          \"_id\": \"5a012c478e9c32270558459d\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"admin\",\n              \"content\": \"dwdwdw\",\n              \"_id\": \"5a01647102a6cb4f6e167dac\",\n              \"replyTime\": \"2017-11-07T07:44:49.203Z\"\n            },\n            {\n              \"userName\": \"admin\",\n              \"content\": \"ooo\",\n              \"_id\": \"5a0164f902a6cb4f6e167dad\",\n              \"replyTime\": \"2017-11-07T07:47:05.016Z\"\n            },\n            {\n              \"userName\": \"admin\",\n              \"content\": \"ooobbb\",\n              \"_id\": \"5a0164fe02a6cb4f6e167dae\",\n              \"replyTime\": \"2017-11-07T07:47:10.686Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T03:45:11.978Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccccccc\",\n          \"_id\": \"5a016fd402a6cb4f6e167db2\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a016fe702a6cb4f6e167db3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n        },\n        {\n          \"userName\": \"admin\",\n          \"content\": \"111\",\n          \"_id\": \"5a01728302a6cb4f6e167db4\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"admin\",\n              \"content\": \"222\",\n              \"_id\": \"5a01728702a6cb4f6e167db5\",\n              \"replyTime\": \"2017-11-07T08:44:55.937Z\"\n            },\n            {\n              \"userName\": \"admin\",\n              \"content\": \"333\",\n              \"_id\": \"5a01728b02a6cb4f6e167db6\",\n              \"replyTime\": \"2017-11-07T08:44:59.178Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T08:44:51.986Z\"\n        },\n        {\n          \"userName\": \"admin\",\n          \"_id\": \"5a01748d02a6cb4f6e167db7\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:53:33.709Z\"\n        },\n        {\n          \"userName\": \"admin\",\n          \"_id\": \"5a0174c202a6cb4f6e167db8\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:54:26.187Z\"\n        }\n      ],\n      \"viewed\": 195,\n      \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n    },\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 11,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:30:19.796] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a0118474c4aea1b77651fd5","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 11
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0118474c4aea1b77651fd5\",\n    \"title\": \"测试111\",\n    \"content\": \"1122\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"content\": \"dsdad\",\n        \"_id\": \"5a01284ccd447826016eeeba\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n      },\n      {\n        \"content\": \"哈哈哈哈\",\n        \"_id\": \"5a012bebcd447826016eeebb\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n      },\n      {\n        \"content\": \"vvvv\",\n        \"_id\": \"5a012bf4cd447826016eeebc\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"fvdvdv\",\n        \"_id\": \"5a012c478e9c32270558459d\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"dwdwdw\",\n            \"_id\": \"5a01647102a6cb4f6e167dac\",\n            \"replyTime\": \"2017-11-07T07:44:49.203Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooo\",\n            \"_id\": \"5a0164f902a6cb4f6e167dad\",\n            \"replyTime\": \"2017-11-07T07:47:05.016Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooobbb\",\n            \"_id\": \"5a0164fe02a6cb4f6e167dae\",\n            \"replyTime\": \"2017-11-07T07:47:10.686Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T03:45:11.978Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccccccc\",\n        \"_id\": \"5a016fd402a6cb4f6e167db2\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a016fe702a6cb4f6e167db3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"111\",\n        \"_id\": \"5a01728302a6cb4f6e167db4\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"222\",\n            \"_id\": \"5a01728702a6cb4f6e167db5\",\n            \"replyTime\": \"2017-11-07T08:44:55.937Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"333\",\n            \"_id\": \"5a01728b02a6cb4f6e167db6\",\n            \"replyTime\": \"2017-11-07T08:44:59.178Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T08:44:51.986Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"_id\": \"5a01748d02a6cb4f6e167db7\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:53:33.709Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"_id\": \"5a0174c202a6cb4f6e167db8\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:54:26.187Z\"\n      }\n    ],\n    \"viewed\": 196,\n    \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:30:19.805] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a0118474c4aea1b77651fd5
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a0118474c4aea1b77651fd5"}
response time: 7
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0118474c4aea1b77651fd5\",\n    \"title\": \"测试111\",\n    \"content\": \"1122\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"content\": \"dsdad\",\n        \"_id\": \"5a01284ccd447826016eeeba\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n      },\n      {\n        \"content\": \"哈哈哈哈\",\n        \"_id\": \"5a012bebcd447826016eeebb\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n      },\n      {\n        \"content\": \"vvvv\",\n        \"_id\": \"5a012bf4cd447826016eeebc\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"fvdvdv\",\n        \"_id\": \"5a012c478e9c32270558459d\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"dwdwdw\",\n            \"_id\": \"5a01647102a6cb4f6e167dac\",\n            \"replyTime\": \"2017-11-07T07:44:49.203Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooo\",\n            \"_id\": \"5a0164f902a6cb4f6e167dad\",\n            \"replyTime\": \"2017-11-07T07:47:05.016Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooobbb\",\n            \"_id\": \"5a0164fe02a6cb4f6e167dae\",\n            \"replyTime\": \"2017-11-07T07:47:10.686Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T03:45:11.978Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccccccc\",\n        \"_id\": \"5a016fd402a6cb4f6e167db2\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a016fe702a6cb4f6e167db3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"111\",\n        \"_id\": \"5a01728302a6cb4f6e167db4\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"222\",\n            \"_id\": \"5a01728702a6cb4f6e167db5\",\n            \"replyTime\": \"2017-11-07T08:44:55.937Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"333\",\n            \"_id\": \"5a01728b02a6cb4f6e167db6\",\n            \"replyTime\": \"2017-11-07T08:44:59.178Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T08:44:51.986Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"_id\": \"5a01748d02a6cb4f6e167db7\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:53:33.709Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"_id\": \"5a0174c202a6cb4f6e167db8\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:54:26.187Z\"\n      }\n    ],\n    \"viewed\": 196,\n    \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:30:24.286] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/deleteReply
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a01748d02a6cb4f6e167db7","artId":"5a0118474c4aea1b77651fd5","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 11
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"删除成功\",\n  \"data\": {\n    \"_id\": \"5a0118474c4aea1b77651fd5\",\n    \"title\": \"测试111\",\n    \"content\": \"1122\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"content\": \"dsdad\",\n        \"_id\": \"5a01284ccd447826016eeeba\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n      },\n      {\n        \"content\": \"哈哈哈哈\",\n        \"_id\": \"5a012bebcd447826016eeebb\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n      },\n      {\n        \"content\": \"vvvv\",\n        \"_id\": \"5a012bf4cd447826016eeebc\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"fvdvdv\",\n        \"_id\": \"5a012c478e9c32270558459d\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"dwdwdw\",\n            \"_id\": \"5a01647102a6cb4f6e167dac\",\n            \"replyTime\": \"2017-11-07T07:44:49.203Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooo\",\n            \"_id\": \"5a0164f902a6cb4f6e167dad\",\n            \"replyTime\": \"2017-11-07T07:47:05.016Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooobbb\",\n            \"_id\": \"5a0164fe02a6cb4f6e167dae\",\n            \"replyTime\": \"2017-11-07T07:47:10.686Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T03:45:11.978Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccccccc\",\n        \"_id\": \"5a016fd402a6cb4f6e167db2\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a016fe702a6cb4f6e167db3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"111\",\n        \"_id\": \"5a01728302a6cb4f6e167db4\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"222\",\n            \"_id\": \"5a01728702a6cb4f6e167db5\",\n            \"replyTime\": \"2017-11-07T08:44:55.937Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"333\",\n            \"_id\": \"5a01728b02a6cb4f6e167db6\",\n            \"replyTime\": \"2017-11-07T08:44:59.178Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T08:44:51.986Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"_id\": \"5a0174c202a6cb4f6e167db8\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:54:26.187Z\"\n      }\n    ],\n    \"viewed\": 196,\n    \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:30:24.934] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a0118474c4aea1b77651fd5
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a0118474c4aea1b77651fd5"}
response time: 7
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0118474c4aea1b77651fd5\",\n    \"title\": \"测试111\",\n    \"content\": \"1122\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"content\": \"dsdad\",\n        \"_id\": \"5a01284ccd447826016eeeba\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n      },\n      {\n        \"content\": \"哈哈哈哈\",\n        \"_id\": \"5a012bebcd447826016eeebb\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n      },\n      {\n        \"content\": \"vvvv\",\n        \"_id\": \"5a012bf4cd447826016eeebc\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"fvdvdv\",\n        \"_id\": \"5a012c478e9c32270558459d\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"dwdwdw\",\n            \"_id\": \"5a01647102a6cb4f6e167dac\",\n            \"replyTime\": \"2017-11-07T07:44:49.203Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooo\",\n            \"_id\": \"5a0164f902a6cb4f6e167dad\",\n            \"replyTime\": \"2017-11-07T07:47:05.016Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooobbb\",\n            \"_id\": \"5a0164fe02a6cb4f6e167dae\",\n            \"replyTime\": \"2017-11-07T07:47:10.686Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T03:45:11.978Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccccccc\",\n        \"_id\": \"5a016fd402a6cb4f6e167db2\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a016fe702a6cb4f6e167db3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"111\",\n        \"_id\": \"5a01728302a6cb4f6e167db4\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"222\",\n            \"_id\": \"5a01728702a6cb4f6e167db5\",\n            \"replyTime\": \"2017-11-07T08:44:55.937Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"333\",\n            \"_id\": \"5a01728b02a6cb4f6e167db6\",\n            \"replyTime\": \"2017-11-07T08:44:59.178Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T08:44:51.986Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"_id\": \"5a0174c202a6cb4f6e167db8\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:54:26.187Z\"\n      }\n    ],\n    \"viewed\": 196,\n    \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:30:27.157] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/deleteReply
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a0174c202a6cb4f6e167db8","artId":"5a0118474c4aea1b77651fd5","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 11
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"删除成功\",\n  \"data\": {\n    \"_id\": \"5a0118474c4aea1b77651fd5\",\n    \"title\": \"测试111\",\n    \"content\": \"1122\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"content\": \"dsdad\",\n        \"_id\": \"5a01284ccd447826016eeeba\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n      },\n      {\n        \"content\": \"哈哈哈哈\",\n        \"_id\": \"5a012bebcd447826016eeebb\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n      },\n      {\n        \"content\": \"vvvv\",\n        \"_id\": \"5a012bf4cd447826016eeebc\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"fvdvdv\",\n        \"_id\": \"5a012c478e9c32270558459d\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"dwdwdw\",\n            \"_id\": \"5a01647102a6cb4f6e167dac\",\n            \"replyTime\": \"2017-11-07T07:44:49.203Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooo\",\n            \"_id\": \"5a0164f902a6cb4f6e167dad\",\n            \"replyTime\": \"2017-11-07T07:47:05.016Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooobbb\",\n            \"_id\": \"5a0164fe02a6cb4f6e167dae\",\n            \"replyTime\": \"2017-11-07T07:47:10.686Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T03:45:11.978Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccccccc\",\n        \"_id\": \"5a016fd402a6cb4f6e167db2\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a016fe702a6cb4f6e167db3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"111\",\n        \"_id\": \"5a01728302a6cb4f6e167db4\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"222\",\n            \"_id\": \"5a01728702a6cb4f6e167db5\",\n            \"replyTime\": \"2017-11-07T08:44:55.937Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"333\",\n            \"_id\": \"5a01728b02a6cb4f6e167db6\",\n            \"replyTime\": \"2017-11-07T08:44:59.178Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T08:44:51.986Z\"\n      }\n    ],\n    \"viewed\": 196,\n    \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:30:27.750] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a0118474c4aea1b77651fd5
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a0118474c4aea1b77651fd5"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0118474c4aea1b77651fd5\",\n    \"title\": \"测试111\",\n    \"content\": \"1122\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"content\": \"dsdad\",\n        \"_id\": \"5a01284ccd447826016eeeba\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n      },\n      {\n        \"content\": \"哈哈哈哈\",\n        \"_id\": \"5a012bebcd447826016eeebb\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n      },\n      {\n        \"content\": \"vvvv\",\n        \"_id\": \"5a012bf4cd447826016eeebc\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"fvdvdv\",\n        \"_id\": \"5a012c478e9c32270558459d\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"dwdwdw\",\n            \"_id\": \"5a01647102a6cb4f6e167dac\",\n            \"replyTime\": \"2017-11-07T07:44:49.203Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooo\",\n            \"_id\": \"5a0164f902a6cb4f6e167dad\",\n            \"replyTime\": \"2017-11-07T07:47:05.016Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooobbb\",\n            \"_id\": \"5a0164fe02a6cb4f6e167dae\",\n            \"replyTime\": \"2017-11-07T07:47:10.686Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T03:45:11.978Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccccccc\",\n        \"_id\": \"5a016fd402a6cb4f6e167db2\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a016fe702a6cb4f6e167db3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"111\",\n        \"_id\": \"5a01728302a6cb4f6e167db4\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"222\",\n            \"_id\": \"5a01728702a6cb4f6e167db5\",\n            \"replyTime\": \"2017-11-07T08:44:55.937Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"333\",\n            \"_id\": \"5a01728b02a6cb4f6e167db6\",\n            \"replyTime\": \"2017-11-07T08:44:59.178Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T08:44:51.986Z\"\n      }\n    ],\n    \"viewed\": 196,\n    \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:33:53.050] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a0118474c4aea1b77651fd5","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 7
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0118474c4aea1b77651fd5\",\n    \"title\": \"测试111\",\n    \"content\": \"1122\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"content\": \"dsdad\",\n        \"_id\": \"5a01284ccd447826016eeeba\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n      },\n      {\n        \"content\": \"哈哈哈哈\",\n        \"_id\": \"5a012bebcd447826016eeebb\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n      },\n      {\n        \"content\": \"vvvv\",\n        \"_id\": \"5a012bf4cd447826016eeebc\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"fvdvdv\",\n        \"_id\": \"5a012c478e9c32270558459d\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"dwdwdw\",\n            \"_id\": \"5a01647102a6cb4f6e167dac\",\n            \"replyTime\": \"2017-11-07T07:44:49.203Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooo\",\n            \"_id\": \"5a0164f902a6cb4f6e167dad\",\n            \"replyTime\": \"2017-11-07T07:47:05.016Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooobbb\",\n            \"_id\": \"5a0164fe02a6cb4f6e167dae\",\n            \"replyTime\": \"2017-11-07T07:47:10.686Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T03:45:11.978Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccccccc\",\n        \"_id\": \"5a016fd402a6cb4f6e167db2\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a016fe702a6cb4f6e167db3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"111\",\n        \"_id\": \"5a01728302a6cb4f6e167db4\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"222\",\n            \"_id\": \"5a01728702a6cb4f6e167db5\",\n            \"replyTime\": \"2017-11-07T08:44:55.937Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"333\",\n            \"_id\": \"5a01728b02a6cb4f6e167db6\",\n            \"replyTime\": \"2017-11-07T08:44:59.178Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T08:44:51.986Z\"\n      }\n    ],\n    \"viewed\": 197,\n    \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:33:53.053] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a0118474c4aea1b77651fd5
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a0118474c4aea1b77651fd5"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0118474c4aea1b77651fd5\",\n    \"title\": \"测试111\",\n    \"content\": \"1122\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"content\": \"dsdad\",\n        \"_id\": \"5a01284ccd447826016eeeba\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n      },\n      {\n        \"content\": \"哈哈哈哈\",\n        \"_id\": \"5a012bebcd447826016eeebb\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n      },\n      {\n        \"content\": \"vvvv\",\n        \"_id\": \"5a012bf4cd447826016eeebc\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"fvdvdv\",\n        \"_id\": \"5a012c478e9c32270558459d\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"dwdwdw\",\n            \"_id\": \"5a01647102a6cb4f6e167dac\",\n            \"replyTime\": \"2017-11-07T07:44:49.203Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooo\",\n            \"_id\": \"5a0164f902a6cb4f6e167dad\",\n            \"replyTime\": \"2017-11-07T07:47:05.016Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooobbb\",\n            \"_id\": \"5a0164fe02a6cb4f6e167dae\",\n            \"replyTime\": \"2017-11-07T07:47:10.686Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T03:45:11.978Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccccccc\",\n        \"_id\": \"5a016fd402a6cb4f6e167db2\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a016fe702a6cb4f6e167db3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"111\",\n        \"_id\": \"5a01728302a6cb4f6e167db4\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"222\",\n            \"_id\": \"5a01728702a6cb4f6e167db5\",\n            \"replyTime\": \"2017-11-07T08:44:55.937Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"333\",\n            \"_id\": \"5a01728b02a6cb4f6e167db6\",\n            \"replyTime\": \"2017-11-07T08:44:59.178Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T08:44:51.986Z\"\n      }\n    ],\n    \"viewed\": 197,\n    \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:33:57.473] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/deleteReply
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a01728302a6cb4f6e167db4","artId":"5a0118474c4aea1b77651fd5","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 6
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"删除成功\",\n  \"data\": {\n    \"_id\": \"5a0118474c4aea1b77651fd5\",\n    \"title\": \"测试111\",\n    \"content\": \"1122\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"content\": \"dsdad\",\n        \"_id\": \"5a01284ccd447826016eeeba\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n      },\n      {\n        \"content\": \"哈哈哈哈\",\n        \"_id\": \"5a012bebcd447826016eeebb\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n      },\n      {\n        \"content\": \"vvvv\",\n        \"_id\": \"5a012bf4cd447826016eeebc\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"fvdvdv\",\n        \"_id\": \"5a012c478e9c32270558459d\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"dwdwdw\",\n            \"_id\": \"5a01647102a6cb4f6e167dac\",\n            \"replyTime\": \"2017-11-07T07:44:49.203Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooo\",\n            \"_id\": \"5a0164f902a6cb4f6e167dad\",\n            \"replyTime\": \"2017-11-07T07:47:05.016Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooobbb\",\n            \"_id\": \"5a0164fe02a6cb4f6e167dae\",\n            \"replyTime\": \"2017-11-07T07:47:10.686Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T03:45:11.978Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccccccc\",\n        \"_id\": \"5a016fd402a6cb4f6e167db2\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a016fe702a6cb4f6e167db3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n      }\n    ],\n    \"viewed\": 197,\n    \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:35:15.751] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a0118474c4aea1b77651fd5","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 6
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0118474c4aea1b77651fd5\",\n    \"title\": \"测试111\",\n    \"content\": \"1122\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"content\": \"dsdad\",\n        \"_id\": \"5a01284ccd447826016eeeba\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n      },\n      {\n        \"content\": \"哈哈哈哈\",\n        \"_id\": \"5a012bebcd447826016eeebb\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n      },\n      {\n        \"content\": \"vvvv\",\n        \"_id\": \"5a012bf4cd447826016eeebc\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"fvdvdv\",\n        \"_id\": \"5a012c478e9c32270558459d\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"dwdwdw\",\n            \"_id\": \"5a01647102a6cb4f6e167dac\",\n            \"replyTime\": \"2017-11-07T07:44:49.203Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooo\",\n            \"_id\": \"5a0164f902a6cb4f6e167dad\",\n            \"replyTime\": \"2017-11-07T07:47:05.016Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooobbb\",\n            \"_id\": \"5a0164fe02a6cb4f6e167dae\",\n            \"replyTime\": \"2017-11-07T07:47:10.686Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T03:45:11.978Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccccccc\",\n        \"_id\": \"5a016fd402a6cb4f6e167db2\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a016fe702a6cb4f6e167db3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n      }\n    ],\n    \"viewed\": 198,\n    \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:35:15.754] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a0118474c4aea1b77651fd5
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a0118474c4aea1b77651fd5"}
response time: 5
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0118474c4aea1b77651fd5\",\n    \"title\": \"测试111\",\n    \"content\": \"1122\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"content\": \"dsdad\",\n        \"_id\": \"5a01284ccd447826016eeeba\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n      },\n      {\n        \"content\": \"哈哈哈哈\",\n        \"_id\": \"5a012bebcd447826016eeebb\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n      },\n      {\n        \"content\": \"vvvv\",\n        \"_id\": \"5a012bf4cd447826016eeebc\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n      },\n      {\n        \"userName\": \"admin\",\n        \"content\": \"fvdvdv\",\n        \"_id\": \"5a012c478e9c32270558459d\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"admin\",\n            \"content\": \"dwdwdw\",\n            \"_id\": \"5a01647102a6cb4f6e167dac\",\n            \"replyTime\": \"2017-11-07T07:44:49.203Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooo\",\n            \"_id\": \"5a0164f902a6cb4f6e167dad\",\n            \"replyTime\": \"2017-11-07T07:47:05.016Z\"\n          },\n          {\n            \"userName\": \"admin\",\n            \"content\": \"ooobbb\",\n            \"_id\": \"5a0164fe02a6cb4f6e167dae\",\n            \"replyTime\": \"2017-11-07T07:47:10.686Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T03:45:11.978Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccccccc\",\n        \"_id\": \"5a016fd402a6cb4f6e167db2\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a016fe702a6cb4f6e167db3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n      }\n    ],\n    \"viewed\": 198,\n    \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:35:22.781] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/deleteReply
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a012c478e9c32270558459d","artId":"5a0118474c4aea1b77651fd5","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 5
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"删除成功\",\n  \"data\": {\n    \"_id\": \"5a0118474c4aea1b77651fd5\",\n    \"title\": \"测试111\",\n    \"content\": \"1122\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"content\": \"dsdad\",\n        \"_id\": \"5a01284ccd447826016eeeba\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n      },\n      {\n        \"content\": \"哈哈哈哈\",\n        \"_id\": \"5a012bebcd447826016eeebb\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n      },\n      {\n        \"content\": \"vvvv\",\n        \"_id\": \"5a012bf4cd447826016eeebc\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccccccc\",\n        \"_id\": \"5a016fd402a6cb4f6e167db2\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a016fe702a6cb4f6e167db3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n      }\n    ],\n    \"viewed\": 198,\n    \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:37:21.906] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a0118474c4aea1b77651fd5\",\n      \"title\": \"测试111\",\n      \"content\": \"1122\",\n      \"author\": \"qichangjun\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"content\": \"dsdad\",\n          \"_id\": \"5a01284ccd447826016eeeba\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n        },\n        {\n          \"content\": \"哈哈哈哈\",\n          \"_id\": \"5a012bebcd447826016eeebb\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n        },\n        {\n          \"content\": \"vvvv\",\n          \"_id\": \"5a012bf4cd447826016eeebc\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccccccc\",\n          \"_id\": \"5a016fd402a6cb4f6e167db2\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a016fe702a6cb4f6e167db3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n        }\n      ],\n      \"viewed\": 198,\n      \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n    },\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 11,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:37:23.351] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 7
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [],\n    \"viewed\": 12,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:37:23.354] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a016ad702a6cb4f6e167daf
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a016ad702a6cb4f6e167daf"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [],\n    \"viewed\": 12,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:37:25.100] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ2MjUzLCJleHAiOjE1MTAwODk0NTN9.YiDEjU0mgkaq9ATiS5e14M1Z39J5vtj-vZTKLtS3hSg"}
response time: 5
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a0118474c4aea1b77651fd5\",\n      \"title\": \"测试111\",\n      \"content\": \"1122\",\n      \"author\": \"qichangjun\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"content\": \"dsdad\",\n          \"_id\": \"5a01284ccd447826016eeeba\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n        },\n        {\n          \"content\": \"哈哈哈哈\",\n          \"_id\": \"5a012bebcd447826016eeebb\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n        },\n        {\n          \"content\": \"vvvv\",\n          \"_id\": \"5a012bf4cd447826016eeebc\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccccccc\",\n          \"_id\": \"5a016fd402a6cb4f6e167db2\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a016fe702a6cb4f6e167db3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n        }\n      ],\n      \"viewed\": 198,\n      \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n    },\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 12,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:37:33.103] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/users/login
request client ip:  ::ffff:127.0.0.1
request body: 
{"userName":"qichangjun","password":"123abc"}
response time: 6
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"success\",\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMDQ3NDUzLCJleHAiOjE1MTAwOTA2NTN9.3rFMzHQ8mnutdAYoB2EUXcjDyLWlyVPHQjuHvJNF5B8\",\n    \"userName\": \"qichangjun\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:37:33.126] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMDQ3NDUzLCJleHAiOjE1MTAwOTA2NTN9.3rFMzHQ8mnutdAYoB2EUXcjDyLWlyVPHQjuHvJNF5B8"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a0118474c4aea1b77651fd5\",\n      \"title\": \"测试111\",\n      \"content\": \"1122\",\n      \"author\": \"qichangjun\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"content\": \"dsdad\",\n          \"_id\": \"5a01284ccd447826016eeeba\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n        },\n        {\n          \"content\": \"哈哈哈哈\",\n          \"_id\": \"5a012bebcd447826016eeebb\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n        },\n        {\n          \"content\": \"vvvv\",\n          \"_id\": \"5a012bf4cd447826016eeebc\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccccccc\",\n          \"_id\": \"5a016fd402a6cb4f6e167db2\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a016fe702a6cb4f6e167db3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n        }\n      ],\n      \"viewed\": 198,\n      \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n    },\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 12,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:37:34.894] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a0118474c4aea1b77651fd5","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMDQ3NDUzLCJleHAiOjE1MTAwOTA2NTN9.3rFMzHQ8mnutdAYoB2EUXcjDyLWlyVPHQjuHvJNF5B8"}
response time: 6
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0118474c4aea1b77651fd5\",\n    \"title\": \"测试111\",\n    \"content\": \"1122\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"content\": \"dsdad\",\n        \"_id\": \"5a01284ccd447826016eeeba\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n      },\n      {\n        \"content\": \"哈哈哈哈\",\n        \"_id\": \"5a012bebcd447826016eeebb\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n      },\n      {\n        \"content\": \"vvvv\",\n        \"_id\": \"5a012bf4cd447826016eeebc\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccccccc\",\n        \"_id\": \"5a016fd402a6cb4f6e167db2\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a016fe702a6cb4f6e167db3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n      }\n    ],\n    \"viewed\": 199,\n    \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:37:34.910] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a0118474c4aea1b77651fd5
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a0118474c4aea1b77651fd5"}
response time: 21
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0118474c4aea1b77651fd5\",\n    \"title\": \"测试111\",\n    \"content\": \"1122\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"content\": \"dsdad\",\n        \"_id\": \"5a01284ccd447826016eeeba\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n      },\n      {\n        \"content\": \"哈哈哈哈\",\n        \"_id\": \"5a012bebcd447826016eeebb\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n      },\n      {\n        \"content\": \"vvvv\",\n        \"_id\": \"5a012bf4cd447826016eeebc\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccccccc\",\n        \"_id\": \"5a016fd402a6cb4f6e167db2\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:24.270Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a016fe702a6cb4f6e167db3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n      }\n    ],\n    \"viewed\": 199,\n    \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:37:37.990] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/deleteReply
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a016fd402a6cb4f6e167db2","artId":"5a0118474c4aea1b77651fd5","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMDQ3NDUzLCJleHAiOjE1MTAwOTA2NTN9.3rFMzHQ8mnutdAYoB2EUXcjDyLWlyVPHQjuHvJNF5B8"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"删除成功\",\n  \"data\": {\n    \"_id\": \"5a0118474c4aea1b77651fd5\",\n    \"title\": \"测试111\",\n    \"content\": \"1122\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"content\": \"dsdad\",\n        \"_id\": \"5a01284ccd447826016eeeba\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n      },\n      {\n        \"content\": \"哈哈哈哈\",\n        \"_id\": \"5a012bebcd447826016eeebb\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n      },\n      {\n        \"content\": \"vvvv\",\n        \"_id\": \"5a012bf4cd447826016eeebc\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a016fe702a6cb4f6e167db3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n      }\n    ],\n    \"viewed\": 199,\n    \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:43:34.960] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/users/login
request client ip:  ::ffff:127.0.0.1
request body: 
{"userName":"admin","password":"2017Dctm@1234"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"success\",\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ3ODE0LCJleHAiOjE1MTAwOTEwMTR9.iuPtBNkqv8qNSoPQKvqL_liXpFy-Qbf4NTExJaZGAKg\",\n    \"userName\": \"admin\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:43:35.207] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ3ODE0LCJleHAiOjE1MTAwOTEwMTR9.iuPtBNkqv8qNSoPQKvqL_liXpFy-Qbf4NTExJaZGAKg"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a0118474c4aea1b77651fd5\",\n      \"title\": \"测试111\",\n      \"content\": \"1122\",\n      \"author\": \"qichangjun\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"content\": \"dsdad\",\n          \"_id\": \"5a01284ccd447826016eeeba\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n        },\n        {\n          \"content\": \"哈哈哈哈\",\n          \"_id\": \"5a012bebcd447826016eeebb\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n        },\n        {\n          \"content\": \"vvvv\",\n          \"_id\": \"5a012bf4cd447826016eeebc\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a016fe702a6cb4f6e167db3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n        }\n      ],\n      \"viewed\": 199,\n      \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n    },\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 12,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:43:46.581] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a0118474c4aea1b77651fd5","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ3ODE0LCJleHAiOjE1MTAwOTEwMTR9.iuPtBNkqv8qNSoPQKvqL_liXpFy-Qbf4NTExJaZGAKg"}
response time: 8
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0118474c4aea1b77651fd5\",\n    \"title\": \"测试111\",\n    \"content\": \"1122\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"content\": \"dsdad\",\n        \"_id\": \"5a01284ccd447826016eeeba\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n      },\n      {\n        \"content\": \"哈哈哈哈\",\n        \"_id\": \"5a012bebcd447826016eeebb\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n      },\n      {\n        \"content\": \"vvvv\",\n        \"_id\": \"5a012bf4cd447826016eeebc\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a016fe702a6cb4f6e167db3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n      }\n    ],\n    \"viewed\": 200,\n    \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:43:46.583] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a0118474c4aea1b77651fd5
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a0118474c4aea1b77651fd5"}
response time: 8
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0118474c4aea1b77651fd5\",\n    \"title\": \"测试111\",\n    \"content\": \"1122\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"content\": \"dsdad\",\n        \"_id\": \"5a01284ccd447826016eeeba\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n      },\n      {\n        \"content\": \"哈哈哈哈\",\n        \"_id\": \"5a012bebcd447826016eeebb\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n      },\n      {\n        \"content\": \"vvvv\",\n        \"_id\": \"5a012bf4cd447826016eeebc\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a016fe702a6cb4f6e167db3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n      }\n    ],\n    \"viewed\": 200,\n    \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:43:56.530] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ3ODE0LCJleHAiOjE1MTAwOTEwMTR9.iuPtBNkqv8qNSoPQKvqL_liXpFy-Qbf4NTExJaZGAKg"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a0118474c4aea1b77651fd5\",\n      \"title\": \"测试111\",\n      \"content\": \"1122\",\n      \"author\": \"qichangjun\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"content\": \"dsdad\",\n          \"_id\": \"5a01284ccd447826016eeeba\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n        },\n        {\n          \"content\": \"哈哈哈哈\",\n          \"_id\": \"5a012bebcd447826016eeebb\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n        },\n        {\n          \"content\": \"vvvv\",\n          \"_id\": \"5a012bf4cd447826016eeebc\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a016fe702a6cb4f6e167db3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n        }\n      ],\n      \"viewed\": 200,\n      \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n    },\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 12,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:44:06.922] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/users/login
request client ip:  ::ffff:127.0.0.1
request body: 
{"userName":"qichangjun","password":"123abc"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"success\",\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMDQ3ODQ2LCJleHAiOjE1MTAwOTEwNDZ9.9GMhft2yCs9qHWH1bneBODdvC72B613tZXAP-DrgwK8\",\n    \"userName\": \"qichangjun\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:44:06.949] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMDQ3ODQ2LCJleHAiOjE1MTAwOTEwNDZ9.9GMhft2yCs9qHWH1bneBODdvC72B613tZXAP-DrgwK8"}
response time: 11
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a0118474c4aea1b77651fd5\",\n      \"title\": \"测试111\",\n      \"content\": \"1122\",\n      \"author\": \"qichangjun\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"content\": \"dsdad\",\n          \"_id\": \"5a01284ccd447826016eeeba\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n        },\n        {\n          \"content\": \"哈哈哈哈\",\n          \"_id\": \"5a012bebcd447826016eeebb\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n        },\n        {\n          \"content\": \"vvvv\",\n          \"_id\": \"5a012bf4cd447826016eeebc\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a016fe702a6cb4f6e167db3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n        }\n      ],\n      \"viewed\": 200,\n      \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n    },\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 12,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:44:08.965] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/deleteArticle
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMDQ3ODQ2LCJleHAiOjE1MTAwOTEwNDZ9.9GMhft2yCs9qHWH1bneBODdvC72B613tZXAP-DrgwK8","id":"5a0118474c4aea1b77651fd5"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0118474c4aea1b77651fd5\",\n    \"title\": \"测试111\",\n    \"content\": \"1122\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"content\": \"dsdad\",\n        \"_id\": \"5a01284ccd447826016eeeba\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:28:12.773Z\"\n      },\n      {\n        \"content\": \"哈哈哈哈\",\n        \"_id\": \"5a012bebcd447826016eeebb\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:39.769Z\"\n      },\n      {\n        \"content\": \"vvvv\",\n        \"_id\": \"5a012bf4cd447826016eeebc\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T03:43:48.945Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a016fe702a6cb4f6e167db3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T08:33:43.131Z\"\n      }\n    ],\n    \"viewed\": 200,\n    \"creatDate\": \"2017-11-07T02:19:51.566Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:44:09.388] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMDQ3ODQ2LCJleHAiOjE1MTAwOTEwNDZ9.9GMhft2yCs9qHWH1bneBODdvC72B613tZXAP-DrgwK8"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 12,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:44:10.681] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMDQ3ODQ2LCJleHAiOjE1MTAwOTEwNDZ9.9GMhft2yCs9qHWH1bneBODdvC72B613tZXAP-DrgwK8"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [],\n    \"viewed\": 13,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:44:10.683] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a016ad702a6cb4f6e167daf
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a016ad702a6cb4f6e167daf"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [],\n    \"viewed\": 13,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:44:13.645] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/addReply
request client ip:  ::ffff:127.0.0.1
request body: 
{"content":"ccscs","id":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMDQ3ODQ2LCJleHAiOjE1MTAwOTEwNDZ9.9GMhft2yCs9qHWH1bneBODdvC72B613tZXAP-DrgwK8"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccscs\",\n        \"_id\": \"5a01806dec9e0358be71b6b1\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n      }\n    ],\n    \"viewed\": 13,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:44:13.653] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a016ad702a6cb4f6e167daf
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a016ad702a6cb4f6e167daf"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccscs\",\n        \"_id\": \"5a01806dec9e0358be71b6b1\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n      }\n    ],\n    \"viewed\": 13,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:44:18.629] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/addChildReply
request client ip:  ::ffff:127.0.0.1
request body: 
{"content":"hahaha","id":"5a01806dec9e0358be71b6b1","artId":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMDQ3ODQ2LCJleHAiOjE1MTAwOTEwNDZ9.9GMhft2yCs9qHWH1bneBODdvC72B613tZXAP-DrgwK8"}
response time: 5
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccscs\",\n        \"_id\": \"5a01806dec9e0358be71b6b1\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"qichangjun\",\n            \"content\": \"hahaha\",\n            \"_id\": \"5a018072ec9e0358be71b6b2\",\n            \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n      }\n    ],\n    \"viewed\": 13,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:44:18.637] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a016ad702a6cb4f6e167daf
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a016ad702a6cb4f6e167daf"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccscs\",\n        \"_id\": \"5a01806dec9e0358be71b6b1\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"qichangjun\",\n            \"content\": \"hahaha\",\n            \"_id\": \"5a018072ec9e0358be71b6b2\",\n            \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n      }\n    ],\n    \"viewed\": 13,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:44:34.149] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/addReply
request client ip:  ::ffff:127.0.0.1
request body: 
{"content":"1.安装\n\tnpm install -g think-cli\n2.查看版本号\n\tthinkjs -v\n3.卸载旧版本命令\n\tnpm uninstall -g thinkjs\n4.创建项目\n\tthinkjs new [demo(文件名)]\n\tcd demo\n\tnpm install\n\tnpm start\n5.项目目录如下：\n\t|— development.js   //开发环境下的入口文件\n\t|— nginx.conf  //nginx 配置文件\n\t|— package.json\n\t|— pm2.json //pm2 配置文件\n\t|— production.js //生产环境下的入口文件\n\t|— README.md\n\n|--- src\n| |--- bootstrap  //启动自动执行目录 \n| | |--- master.js //Master 进程下自动执行\n| | |--- worker.js //Worker 进程下自动执行\n| |--- config  //配置文件目录\n| | |--- adapter.js  // adapter 配置文件 \n| | |--- config.js  // 默认配置文件 \n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \n| | |--- extend.js  //extend 配置文件 \n| | |--- middleware.js //middleware 配置文件 \n| | |--- router.js //自定义路由配置文件\n| |--- controller  //控制器目录 \n| | |--- base.js\n| | |--- index.js\n| |--- service  //服务目录 \n| | |---.js //用户自己定义的服务\n| |--- logic //logic 目录\n| | |--- index.js\n| |--- model //模型目录\n| | |--- index.js\n|--- view  //模板目录\n| |--- index_index.html\n|--- www\n| |--- static  //静态资源目录\n| | |--- css\n| | |--- img\n| | |--- js","id":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMDQ3ODQ2LCJleHAiOjE1MTAwOTEwNDZ9.9GMhft2yCs9qHWH1bneBODdvC72B613tZXAP-DrgwK8"}
response time: 5
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccscs\",\n        \"_id\": \"5a01806dec9e0358be71b6b1\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"qichangjun\",\n            \"content\": \"hahaha\",\n            \"_id\": \"5a018072ec9e0358be71b6b2\",\n            \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a018082ec9e0358be71b6b3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n      }\n    ],\n    \"viewed\": 13,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:44:34.157] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a016ad702a6cb4f6e167daf
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a016ad702a6cb4f6e167daf"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccscs\",\n        \"_id\": \"5a01806dec9e0358be71b6b1\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"qichangjun\",\n            \"content\": \"hahaha\",\n            \"_id\": \"5a018072ec9e0358be71b6b2\",\n            \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a018082ec9e0358be71b6b3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n      }\n    ],\n    \"viewed\": 13,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:44:59.151] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMDQ3ODQ2LCJleHAiOjE1MTAwOTEwNDZ9.9GMhft2yCs9qHWH1bneBODdvC72B613tZXAP-DrgwK8"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 13,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:45:08.526] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMDQ3ODQ2LCJleHAiOjE1MTAwOTEwNDZ9.9GMhft2yCs9qHWH1bneBODdvC72B613tZXAP-DrgwK8"}
response time: 5
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccscs\",\n        \"_id\": \"5a01806dec9e0358be71b6b1\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"qichangjun\",\n            \"content\": \"hahaha\",\n            \"_id\": \"5a018072ec9e0358be71b6b2\",\n            \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a018082ec9e0358be71b6b3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n      }\n    ],\n    \"viewed\": 14,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:45:08.528] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a016ad702a6cb4f6e167daf
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a016ad702a6cb4f6e167daf"}
response time: 5
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccscs\",\n        \"_id\": \"5a01806dec9e0358be71b6b1\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"qichangjun\",\n            \"content\": \"hahaha\",\n            \"_id\": \"5a018072ec9e0358be71b6b2\",\n            \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a018082ec9e0358be71b6b3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n      }\n    ],\n    \"viewed\": 14,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:45:14.592] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMDQ3ODQ2LCJleHAiOjE1MTAwOTEwNDZ9.9GMhft2yCs9qHWH1bneBODdvC72B613tZXAP-DrgwK8"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 14,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:45:35.469] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMDQ3ODQ2LCJleHAiOjE1MTAwOTEwNDZ9.9GMhft2yCs9qHWH1bneBODdvC72B613tZXAP-DrgwK8"}
response time: 14
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccscs\",\n        \"_id\": \"5a01806dec9e0358be71b6b1\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"qichangjun\",\n            \"content\": \"hahaha\",\n            \"_id\": \"5a018072ec9e0358be71b6b2\",\n            \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a018082ec9e0358be71b6b3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n      }\n    ],\n    \"viewed\": 15,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:45:35.472] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a016ad702a6cb4f6e167daf
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a016ad702a6cb4f6e167daf"}
response time: 12
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccscs\",\n        \"_id\": \"5a01806dec9e0358be71b6b1\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"qichangjun\",\n            \"content\": \"hahaha\",\n            \"_id\": \"5a018072ec9e0358be71b6b2\",\n            \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a018082ec9e0358be71b6b3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n      }\n    ],\n    \"viewed\": 15,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:46:14.720] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMDQ3ODQ2LCJleHAiOjE1MTAwOTEwNDZ9.9GMhft2yCs9qHWH1bneBODdvC72B613tZXAP-DrgwK8"}
response time: 5
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 15,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:46:33.364] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/users/login
request client ip:  ::ffff:127.0.0.1
request body: 
{"userName":"admin","password":"2017Dctm@1234"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"success\",\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ3OTkzLCJleHAiOjE1MTAwOTExOTN9.CoYHna0BFjdSJ-B21tue0uuIXzcCPoXLUfTL6iNZOlI\",\n    \"userName\": \"admin\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:46:33.385] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ3OTkzLCJleHAiOjE1MTAwOTExOTN9.CoYHna0BFjdSJ-B21tue0uuIXzcCPoXLUfTL6iNZOlI"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 15,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:46:36.116] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ3OTkzLCJleHAiOjE1MTAwOTExOTN9.CoYHna0BFjdSJ-B21tue0uuIXzcCPoXLUfTL6iNZOlI"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccscs\",\n        \"_id\": \"5a01806dec9e0358be71b6b1\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"qichangjun\",\n            \"content\": \"hahaha\",\n            \"_id\": \"5a018072ec9e0358be71b6b2\",\n            \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a018082ec9e0358be71b6b3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n      }\n    ],\n    \"viewed\": 16,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:46:36.119] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a016ad702a6cb4f6e167daf
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a016ad702a6cb4f6e167daf"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccscs\",\n        \"_id\": \"5a01806dec9e0358be71b6b1\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"qichangjun\",\n            \"content\": \"hahaha\",\n            \"_id\": \"5a018072ec9e0358be71b6b2\",\n            \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a018082ec9e0358be71b6b3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n      }\n    ],\n    \"viewed\": 16,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:46:37.242] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ3OTkzLCJleHAiOjE1MTAwOTExOTN9.CoYHna0BFjdSJ-B21tue0uuIXzcCPoXLUfTL6iNZOlI"}
response time: 5
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 16,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:46:37.975] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ3OTkzLCJleHAiOjE1MTAwOTExOTN9.CoYHna0BFjdSJ-B21tue0uuIXzcCPoXLUfTL6iNZOlI"}
response time: 6
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccscs\",\n        \"_id\": \"5a01806dec9e0358be71b6b1\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"qichangjun\",\n            \"content\": \"hahaha\",\n            \"_id\": \"5a018072ec9e0358be71b6b2\",\n            \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a018082ec9e0358be71b6b3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n      }\n    ],\n    \"viewed\": 17,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:46:37.979] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a016ad702a6cb4f6e167daf
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a016ad702a6cb4f6e167daf"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccscs\",\n        \"_id\": \"5a01806dec9e0358be71b6b1\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"qichangjun\",\n            \"content\": \"hahaha\",\n            \"_id\": \"5a018072ec9e0358be71b6b2\",\n            \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a018082ec9e0358be71b6b3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n      }\n    ],\n    \"viewed\": 17,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:46:38.830] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ3OTkzLCJleHAiOjE1MTAwOTExOTN9.CoYHna0BFjdSJ-B21tue0uuIXzcCPoXLUfTL6iNZOlI"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 17,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:57:51.674] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ3OTkzLCJleHAiOjE1MTAwOTExOTN9.CoYHna0BFjdSJ-B21tue0uuIXzcCPoXLUfTL6iNZOlI"}
response time: 19
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccscs\",\n        \"_id\": \"5a01806dec9e0358be71b6b1\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"qichangjun\",\n            \"content\": \"hahaha\",\n            \"_id\": \"5a018072ec9e0358be71b6b2\",\n            \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a018082ec9e0358be71b6b3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n      }\n    ],\n    \"viewed\": 18,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:57:51.689] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a016ad702a6cb4f6e167daf
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a016ad702a6cb4f6e167daf"}
response time: 29
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccscs\",\n        \"_id\": \"5a01806dec9e0358be71b6b1\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"qichangjun\",\n            \"content\": \"hahaha\",\n            \"_id\": \"5a018072ec9e0358be71b6b2\",\n            \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a018082ec9e0358be71b6b3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n      }\n    ],\n    \"viewed\": 18,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:58:03.140] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ3OTkzLCJleHAiOjE1MTAwOTExOTN9.CoYHna0BFjdSJ-B21tue0uuIXzcCPoXLUfTL6iNZOlI"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 18,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:58:32.472] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/createArticle
request client ip:  ::ffff:127.0.0.1
request body: 
{"title":"JS基础题，却有多少人能弄清楚其中的奥义？","content":"let data = [1,2,3], i = 0;\ndata[i++] = data[i++]*2;\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ3OTkzLCJleHAiOjE1MTAwOTExOTN9.CoYHna0BFjdSJ-B21tue0uuIXzcCPoXLUfTL6iNZOlI","author":"admin"}
response time: 9
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"创建成功\",\n  \"data\": null\n}"
*************** response log end ***************

[2017-11-07 17:58:32.890] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ3OTkzLCJleHAiOjE1MTAwOTExOTN9.CoYHna0BFjdSJ-B21tue0uuIXzcCPoXLUfTL6iNZOlI"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 18,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 0,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:58:35.140] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a0183c8ec9e0358be71b6b4","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ3OTkzLCJleHAiOjE1MTAwOTExOTN9.CoYHna0BFjdSJ-B21tue0uuIXzcCPoXLUfTL6iNZOlI"}
response time: 8
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n    \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n    \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [],\n    \"viewed\": 1,\n    \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:58:35.143] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a0183c8ec9e0358be71b6b4
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a0183c8ec9e0358be71b6b4"}
response time: 5
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n    \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n    \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [],\n    \"viewed\": 1,\n    \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:58:40.052] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ3OTkzLCJleHAiOjE1MTAwOTExOTN9.CoYHna0BFjdSJ-B21tue0uuIXzcCPoXLUfTL6iNZOlI"}
response time: 6
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 18,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 1,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:59:14.296] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/createArticle
request client ip:  ::ffff:127.0.0.1
request body: 
{"title":"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么","content":"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\n\n一、配置ide和node编译\n\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\n\n二、node运行入口粗读\n\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\nissue5\n\n1. argc和argv\n\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\n\n2.platformInit运行\n\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\nissue5\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\n\n3.调用node::performance::performance_node_start\n\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\n\n4.调用uv_setup_args\n\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\n\n5.调用Init方法\n\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\n\n开始计算node程序运行时间\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\nSafeGetenv(\"OPENSSL_CONF\", &openssl_config);\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\n\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\n6.判断openSSL\n\n#if HAVE_OPENSSL\n  {\n    std::string extra_ca_certs;\n    if (SafeGetenv(\"NODE_EXTRA_CA_CERTS\", &extra_ca_certs))\n      crypto::UseExtraCaCerts(extra_ca_certs);\n  }\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\n\n7. v8_platform.Initialize初始化\n\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\n\n8.V8::Initialize()初始化\n\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\n\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\n// @files ./deps/v8/src/base/once.h line 83\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\n  }\n}\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\nissue5\n\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\n}\n9.调用node::performance::performance_v8_start\n\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\n\n10.调用内联Start\n\nissue5\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\n\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\n\nuv_loop_t* uv_default_loop(void) {\n  if (default_loop_ptr != NULL)\n    return default_loop_ptr;\n  if (uv_loop_init(&default_loop_struct))\n    return NULL;\n  default_loop_ptr = &default_loop_struct;\n  return default_loop_ptr;\n}\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\n\n Isolate::CreateParams params;\n  ArrayBufferAllocator allocator;\n  params.array_buffer_allocator = &allocator;\n#ifdef NODE_ENABLE_VTUNE_PROFILING\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\n#endif\n\n  Isolate* const isolate = Isolate::New(params);\n  if (isolate == nullptr)\n    return 12;  // Signal internal error.\n\n  isolate->AddMessageListener(OnMessage);\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\n  isolate->SetAutorunMicrotasks(false);\n  isolate->SetFatalErrorHandler(OnFatalError);\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\n解释一下这句代码：\n isolate->AddMessageListener(OnMessage);\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\n\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\n\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\n三、node执行过程中发生了什么\n\nissue5\n\n1.node::Environment::Start\n\nissue5\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\n\n2.async_hooks和LoadEnvironment\n\n接下来注意这段代码：\n\n    env.async_hooks()->push_async_ids(1, 0);\n    LoadEnvironment(&env);\n    env.async_hooks()->pop_async_id(1);\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\n\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\n\n3.node::LoadEnvironment\n\nvoid LoadEnvironment(Environment* env) {\n  HandleScope handle_scope(env->isolate());\n  TryCatch try_catch(env->isolate());\n  try_catch.SetVerbose(false);\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\n                                                    \"bootstrap_node.js\");\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\n  if (try_catch.HasCaught())  {\n    ReportException(env, try_catch);\n    exit(10);\n  }\n  CHECK(f_value->IsFunction());\n  Local<Function> f = Local<Function>::Cast(f_value);\n  Local<Object> global = env->context()->Global();//创建Global\n  //...\n  try_catch.SetVerbose(true);\n  env->SetMethod(env->process_object(), \"_rawDebug\", RawDebug);\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \"global\"), global);\n  Local<Value> arg = env->process_object();//创建process\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\n}\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\n\n在内存分配的时候，有个小知识点，正好在这里提一下：\n\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\n  HeapObject* object = nullptr;\n  AllocationResult allocation;\n  if (NEW_SPACE == space) {\n    if (large_object) {\n      space = LO_SPACE;\n    } else {\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\n      if (allocation.To(&object)) {\n        OnAllocationEvent(object, size_in_bytes);\n      }\n      return allocation;\n    }\n  }\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\n\nLO_SPACE（存放大对象）\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\nCODE_SPACE（存放经过turbofan优化后的指令对象）\nMAP_SPACE（主要用于存放map）\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\n  initial_max_old_generation_size_ = max_old_generation_size_ =\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\n          max_old_generation_size_);\n//其中 kPageSize 定义如下\nclass MemoryChunk{\n  public:\n    //省略\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\n    //省略\n}\nclass Page : public MemoryChunk{\n//省略\n}\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\n\n四、运行结束\n\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\n\nif (trace_enabled) {\n    v8_platform.StopTracingAgent();\n  }\n  v8_initialized = false;\n  V8::Dispose();\n  v8_platform.Dispose();\n\n  delete[] exec_argv;\n  exec_argv = nullptr;\n五、总结\n\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\nby 小菜","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ3OTkzLCJleHAiOjE1MTAwOTExOTN9.CoYHna0BFjdSJ-B21tue0uuIXzcCPoXLUfTL6iNZOlI","author":"admin"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"创建成功\",\n  \"data\": null\n}"
*************** response log end ***************

[2017-11-07 17:59:14.720] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ3OTkzLCJleHAiOjE1MTAwOTExOTN9.CoYHna0BFjdSJ-B21tue0uuIXzcCPoXLUfTL6iNZOlI"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 18,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 1,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 0,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:59:16.919] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a0183f2ec9e0358be71b6b5
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a0183f2ec9e0358be71b6b5"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n    \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n    \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [],\n    \"viewed\": 0,\n    \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:59:17.088] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a0183f2ec9e0358be71b6b5","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ3OTkzLCJleHAiOjE1MTAwOTExOTN9.CoYHna0BFjdSJ-B21tue0uuIXzcCPoXLUfTL6iNZOlI"}
response time: 174
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n    \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n    \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [],\n    \"viewed\": 1,\n    \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:59:37.200] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/addReply
request client ip:  ::ffff:127.0.0.1
request body: 
{"content":"好，测试测试","id":"5a0183f2ec9e0358be71b6b5","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMDQ3OTkzLCJleHAiOjE1MTAwOTExOTN9.CoYHna0BFjdSJ-B21tue0uuIXzcCPoXLUfTL6iNZOlI"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n    \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n    \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"admin\",\n        \"content\": \"好，测试测试\",\n        \"_id\": \"5a018409ec9e0358be71b6b6\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n      }\n    ],\n    \"viewed\": 1,\n    \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:59:37.208] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a0183f2ec9e0358be71b6b5
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a0183f2ec9e0358be71b6b5"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n    \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n    \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"admin\",\n        \"content\": \"好，测试测试\",\n        \"_id\": \"5a018409ec9e0358be71b6b6\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n      }\n    ],\n    \"viewed\": 1,\n    \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:59:44.588] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/users/login
request client ip:  ::ffff:127.0.0.1
request body: 
{"userName":"qichangjun","password":"2017Dctm@1234"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 0,\n  \"message\": \"密码不正确\",\n  \"data\": null\n}"
*************** response log end ***************

[2017-11-07 17:59:47.321] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/users/login
request client ip:  ::ffff:127.0.0.1
request body: 
{"userName":"qichangjun","password":"123abc"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"success\",\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMDQ4Nzg3LCJleHAiOjE1MTAwOTE5ODd9.S6VRygSXdyxmXAdJDdcVKeW1r4Jndpiq3I-eODRqv4Q\",\n    \"userName\": \"qichangjun\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:59:47.340] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMDQ4Nzg3LCJleHAiOjE1MTAwOTE5ODd9.S6VRygSXdyxmXAdJDdcVKeW1r4Jndpiq3I-eODRqv4Q"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 18,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 1,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 1,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-07 17:59:48.664] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a0183f2ec9e0358be71b6b5","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMDQ4Nzg3LCJleHAiOjE1MTAwOTE5ODd9.S6VRygSXdyxmXAdJDdcVKeW1r4Jndpiq3I-eODRqv4Q"}
response time: 7
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n    \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n    \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"admin\",\n        \"content\": \"好，测试测试\",\n        \"_id\": \"5a018409ec9e0358be71b6b6\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n      }\n    ],\n    \"viewed\": 2,\n    \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n  }\n}"
*************** response log end ***************

[2017-11-07 17:59:48.666] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a0183f2ec9e0358be71b6b5
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a0183f2ec9e0358be71b6b5"}
response time: 5
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n    \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n    \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"admin\",\n        \"content\": \"好，测试测试\",\n        \"_id\": \"5a018409ec9e0358be71b6b6\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n      }\n    ],\n    \"viewed\": 2,\n    \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n  }\n}"
*************** response log end ***************

