[2017-11-08 10:14:13.122] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/users/login
request client ip:  ::ffff:127.0.0.1
request body: 
{"userName":"admin","password":"2017Dctm@1234"}
response time: 17
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"success\",\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0\",\n    \"userName\": \"admin\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:14:13.335] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0"}
response time: 6
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 18,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 1,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 3,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:14:15.891] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0"}
response time: 29
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0\",\n    \"__v\": 0\n  }\n}"
*************** response log end ***************

[2017-11-08 10:14:21.484] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0"}
response time: 7
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0\",\n    \"__v\": 0\n  }\n}"
*************** response log end ***************

[2017-11-08 10:19:42.530] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0"}
response time: 23
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:19:42.524Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:19:46.886] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:19:46.885Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:19:55.528] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:19:55.528Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:20:04.262] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:20:04.261Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:20:09.528] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:20:09.528Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:20:12.296] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA3MjUzLCJleHAiOjE1MTAxNTA0NTN9.q4bMpI33H0jpHamItpC3N_-OyLJqVALH-EMRp5xkxk0\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:20:12.295Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:22:24.411] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/users/registerUser
request client ip:  ::ffff:127.0.0.1
request body: 
{"userName":"qichangjun","password":"12345","email":"dasdsdsw"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 0,\n  \"message\": \"error\",\n  \"data\": \"用户名已存在\"\n}"
*************** response log end ***************

[2017-11-08 10:22:36.837] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/users/registerUser
request client ip:  ::ffff:127.0.0.1
request body: 
{"userName":"user001","password":"123abc","email":"1061427304@qq.com","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoidXNlcjAwMSIsImlhdCI6MTUxMDEwNzc1NiwiZXhwIjoxNTEwMTUwOTU2fQ.pQK72X-I-eLAY3SKjm_BHy5S7ue9ZfugLj7XJuQwzqw"}
response time: 691
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"注册成功\",\n  \"data\": null\n}"
*************** response log end ***************

[2017-11-08 10:22:41.246] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/users/login
request client ip:  ::ffff:127.0.0.1
request body: 
{"userName":"user001","password":"123abc"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"success\",\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"userName\": \"user001\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:22:41.513] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 8
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 18,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 1,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 3,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:22:45.153] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:24:21.488] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:24:51.282] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:24:56.339] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 33
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:25:01.584] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 31
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:25:09.349] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 46
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:25:14.189] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 281
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:25:16.828] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 129
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:25:22.818] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:25:24.942] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:25:28.652] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:25:31.714] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:25:35.810] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:25:37.800] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:25:42.622] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:25:49.974] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:25:53.260] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:26:01.702] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:26:35.496] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:27:44.300] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:27:53.055] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:27:55.747] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:29:12.788] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:29:14.998] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:30:07.646] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:30:53.552] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:30:56.005] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:31:11.141] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:35:30.389] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:35:47.495] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:35:50.389] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:36:07.346] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:36:11.572] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:36:50.502] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:36:53.329] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:36:58.576] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:37:02.767] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:37:04.598] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:37:16.652] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:37:28.841] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:37:34.975] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA3NzYxLCJleHAiOjE1MTAxNTA5NjF9.vMJ4FyYsURPaE6d91m9i6naGTGfH5P5Pz13pvZADOOE\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:38:06.277] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/users/login
request client ip:  ::ffff:127.0.0.1
request body: 
{"userName":"admin","password":"2017Dctm@1234"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"success\",\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8\",\n    \"userName\": \"admin\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:38:06.512] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 5
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 18,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 1,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 3,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:38:08.392] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:38:08.391Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:38:08.397] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 18,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 1,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 3,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:38:20.631] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:38:20.631Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:38:20.636] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 18,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 1,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 3,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:38:59.971] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:38:59.971Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:38:59.976] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 18,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 1,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 3,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:39:04.604] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:39:04.604Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:39:04.609] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 18,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 1,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 3,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:39:09.663] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:39:09.662Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:39:09.667] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 18,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 1,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 3,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:39:13.150] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:39:13.150Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:39:13.156] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 18,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 1,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 3,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:39:35.290] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:39:35.290Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:39:35.294] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 18,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 1,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 3,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:39:41.255] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:39:41.254Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:39:41.260] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 18,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 1,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 3,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:39:45.727] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:39:45.727Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:39:45.731] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 18,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 1,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 3,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:40:14.676] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:40:14.675Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:40:14.682] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 18,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 1,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 3,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:40:17.214] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a016ad702a6cb4f6e167daf","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 11
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccscs\",\n        \"_id\": \"5a01806dec9e0358be71b6b1\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"qichangjun\",\n            \"content\": \"hahaha\",\n            \"_id\": \"5a018072ec9e0358be71b6b2\",\n            \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a018082ec9e0358be71b6b3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n      }\n    ],\n    \"viewed\": 19,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:40:17.252] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a016ad702a6cb4f6e167daf
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a016ad702a6cb4f6e167daf"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccscs\",\n        \"_id\": \"5a01806dec9e0358be71b6b1\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"qichangjun\",\n            \"content\": \"hahaha\",\n            \"_id\": \"5a018072ec9e0358be71b6b2\",\n            \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a018082ec9e0358be71b6b3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n      }\n    ],\n    \"viewed\": 19,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:40:19.771] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:40:19.771Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:40:19.776] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 19,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 1,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 3,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:40:20.980] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a0183c8ec9e0358be71b6b4","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n    \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n    \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [],\n    \"viewed\": 2,\n    \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:40:20.982] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a0183c8ec9e0358be71b6b4
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a0183c8ec9e0358be71b6b4"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n    \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n    \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [],\n    \"viewed\": 2,\n    \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:40:22.946] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:40:22.945Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:40:22.950] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 19,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 2,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 3,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:40:23.847] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a0183f2ec9e0358be71b6b5","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 8
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n    \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n    \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"admin\",\n        \"content\": \"好，测试测试\",\n        \"_id\": \"5a018409ec9e0358be71b6b6\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n      }\n    ],\n    \"viewed\": 4,\n    \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:40:23.849] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a0183f2ec9e0358be71b6b5
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a0183f2ec9e0358be71b6b5"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n    \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n    \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"admin\",\n        \"content\": \"好，测试测试\",\n        \"_id\": \"5a018409ec9e0358be71b6b6\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n      }\n    ],\n    \"viewed\": 4,\n    \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:40:25.011] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:40:25.010Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:40:25.017] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 19,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 2,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 4,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:40:27.208] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 19,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 2,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 4,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:40:30.266] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:40:30.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:40:30.271] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 19,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 2,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 4,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:40:33.723] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA4Njg2LCJleHAiOjE1MTAxNTE4ODZ9.DtJh56ppMuAs1YLvPCgSaeZmiot79BIBrb1qdMakEy8"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 19,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 2,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 4,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:40:42.857] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/users/login
request client ip:  ::ffff:127.0.0.1
request body: 
{"userName":"user001","password":"123abc"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"success\",\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM\",\n    \"userName\": \"user001\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:40:42.885] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 19,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 2,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 4,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:40:45.921] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:40:45.925] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": []\n}"
*************** response log end ***************

[2017-11-08 10:41:01.061] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:41:01.066] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": []\n}"
*************** response log end ***************

[2017-11-08 10:41:04.166] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:41:04.171] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": []\n}"
*************** response log end ***************

[2017-11-08 10:41:08.653] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:41:08.655] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": []\n}"
*************** response log end ***************

[2017-11-08 10:41:11.790] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:41:11.793] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": []\n}"
*************** response log end ***************

[2017-11-08 10:41:15.779] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:41:15.782] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": []\n}"
*************** response log end ***************

[2017-11-08 10:41:18.997] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:41:19.001] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": []\n}"
*************** response log end ***************

[2017-11-08 10:42:30.017] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"5a026a6c1454aa15ea3fc087\",\n    \"userName\": \"user001\",\n    \"password\": \"********\",\n    \"email\": \"1061427304@qq.com\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:22:36.151Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:42:30.019] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNWEwMjZhNmMxNDU0YWExNWVhM2ZjMDg3IiwiaWF0IjoxNTEwMTA4ODQyLCJleHAiOjE1MTAxNTIwNDJ9.HrbeJ05C-zjyf-BR9f90didfJJD_7aey7U__LF8KYgM"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": []\n}"
*************** response log end ***************

[2017-11-08 10:46:02.259] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/users/login
request client ip:  ::ffff:127.0.0.1
request body: 
{"userName":"admin","password":"2017Dctm@1234"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"success\",\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs\",\n    \"userName\": \"admin\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:46:02.290] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 19,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 2,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 4,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:46:05.128] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:46:05.128Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:46:05.136] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 19,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 2,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 4,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:49:19.262] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:49:19.262Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:49:19.266] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 19,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 2,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 4,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:49:21.144] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 19,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 2,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 4,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:49:22.585] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs"}
response time: 1
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:49:22.585Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:49:22.589] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a016ad702a6cb4f6e167daf\",\n      \"title\": \"测试文章222222\",\n      \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"ccscs\",\n          \"_id\": \"5a01806dec9e0358be71b6b1\",\n          \"replyChildList\": [\n            {\n              \"userName\": \"qichangjun\",\n              \"content\": \"hahaha\",\n              \"_id\": \"5a018072ec9e0358be71b6b2\",\n              \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n            }\n          ],\n          \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n        },\n        {\n          \"userName\": \"qichangjun\",\n          \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n          \"_id\": \"5a018082ec9e0358be71b6b3\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n        }\n      ],\n      \"viewed\": 19,\n      \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n    },\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 2,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 4,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:49:25.225] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/deleteArticle
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs","id":"5a016ad702a6cb4f6e167daf"}
response time: 58
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a016ad702a6cb4f6e167daf\",\n    \"title\": \"测试文章222222\",\n    \"content\": \"这里是内容，1111111111\\n22222222222\\n       33333333333\",\n    \"author\": \"admin\",\n    \"__v\": 0,\n    \"replyList\": [\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"ccscs\",\n        \"_id\": \"5a01806dec9e0358be71b6b1\",\n        \"replyChildList\": [\n          {\n            \"userName\": \"qichangjun\",\n            \"content\": \"hahaha\",\n            \"_id\": \"5a018072ec9e0358be71b6b2\",\n            \"replyTime\": \"2017-11-07T09:44:18.626Z\"\n          }\n        ],\n        \"replyTime\": \"2017-11-07T09:44:13.642Z\"\n      },\n      {\n        \"userName\": \"qichangjun\",\n        \"content\": \"1.安装\\n\\tnpm install -g think-cli\\n2.查看版本号\\n\\tthinkjs -v\\n3.卸载旧版本命令\\n\\tnpm uninstall -g thinkjs\\n4.创建项目\\n\\tthinkjs new [demo(文件名)]\\n\\tcd demo\\n\\tnpm install\\n\\tnpm start\\n5.项目目录如下：\\n\\t|— development.js   //开发环境下的入口文件\\n\\t|— nginx.conf  //nginx 配置文件\\n\\t|— package.json\\n\\t|— pm2.json //pm2 配置文件\\n\\t|— production.js //生产环境下的入口文件\\n\\t|— README.md\\n\\n|--- src\\n| |--- bootstrap  //启动自动执行目录 \\n| | |--- master.js //Master 进程下自动执行\\n| | |--- worker.js //Worker 进程下自动执行\\n| |--- config  //配置文件目录\\n| | |--- adapter.js  // adapter 配置文件 \\n| | |--- config.js  // 默认配置文件 \\n| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 \\n| | |--- extend.js  //extend 配置文件 \\n| | |--- middleware.js //middleware 配置文件 \\n| | |--- router.js //自定义路由配置文件\\n| |--- controller  //控制器目录 \\n| | |--- base.js\\n| | |--- index.js\\n| |--- service  //服务目录 \\n| | |---.js //用户自己定义的服务\\n| |--- logic //logic 目录\\n| | |--- index.js\\n| |--- model //模型目录\\n| | |--- index.js\\n|--- view  //模板目录\\n| |--- index_index.html\\n|--- www\\n| |--- static  //静态资源目录\\n| | |--- css\\n| | |--- img\\n| | |--- js\",\n        \"_id\": \"5a018082ec9e0358be71b6b3\",\n        \"replyChildList\": [],\n        \"replyTime\": \"2017-11-07T09:44:34.146Z\"\n      }\n    ],\n    \"viewed\": 19,\n    \"creatDate\": \"2017-11-07T08:12:07.265Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:49:25.685] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 2,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 4,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:49:27.973] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 2,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 4,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:49:28.984] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:49:28.983Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:49:28.988] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 2,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 4,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:57:37.839] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 2,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 4,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:57:44.148] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/users/getUserInfo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs
request client ip:  ::ffff:127.0.0.1
request query:  {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"回复成功\",\n  \"data\": {\n    \"_id\": \"59fbcf6bce880907c20b59cd\",\n    \"userName\": \"admin\",\n    \"password\": \"********\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs\",\n    \"__v\": 0,\n    \"registerTime\": \"2017-11-08T02:57:44.147Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:57:44.155] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getOwnarticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmNmNmJjZTg4MDkwN2MyMGI1OWNkIiwiaWF0IjoxNTEwMTA5MTYyLCJleHAiOjE1MTAxNTIzNjJ9.No0fYZ8X39xoEOomoAkjXRrxWOokfmxuDpxBvtLyffs"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 2,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 4,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:57:51.794] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/users/login
request client ip:  ::ffff:127.0.0.1
request body: 
{"userName":"qichangjun","password":"123abc"}
response time: 2
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"success\",\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMTA5ODcxLCJleHAiOjE1MTAxNTMwNzF9.lRCbQQvDDi6f6EVx53Fmqq1DYD88b7DF1ICYjysFW6o\",\n    \"userName\": \"qichangjun\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:57:51.813] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMTA5ODcxLCJleHAiOjE1MTAxNTMwNzF9.lRCbQQvDDi6f6EVx53Fmqq1DYD88b7DF1ICYjysFW6o"}
response time: 3
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 2,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 4,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:59:52.649] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/createArticle
request client ip:  ::ffff:127.0.0.1
request body: 
{"title":"Promise 必知必会（十道题）","content":"Promise 想必大家十分熟悉，想想就那么几个 api，可是你真的了解 Promise 吗？本文根据 Promise 的一些知识点总结了十道题，看看你能做对几道。\n\n题目一\n\nconst promise = new Promise((resolve, reject) => {\n  console.log(1)\n  resolve()\n  console.log(2)\n})\npromise.then(() => {\n  console.log(3)\n})\nconsole.log(4)\n题目二\n\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('success')\n  }, 1000)\n})\nconsole.log(promise)\npromise\n  .then(() => {\n    console.log(promise)\n    throw new Error('error!!!')\n  })\n  .catch(err => {\n    console.log(promise)\n  })\n题目三\n\nconst promise = new Promise((resolve, reject) => {\n  resolve('success1')\n  reject('error')\n  resolve('success2')\n})\n\npromise\n  .then((res) => {\n    console.log('then: ', res)\n  })\n  .catch((err) => {\n    console.log('catch: ', err)\n  })\n题目四\n\nPromise.resolve(1)\n  .then((res) => {\n    console.log(res)\n    return 2\n  })\n  .catch((err) => {\n    return 3\n  })\n  .then((res) => {\n    console.log(res)\n  })\n题目五\n\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    console.log('once')\n    resolve('success')\n  }, 1000)\n})\n\nconst start = Date.now()\npromise.then((res) => {\n  console.log(res, Date.now() - start)\n})\npromise.then((res) => {\n  console.log(res, Date.now() - start)\n})\n题目六\n\nPromise.resolve()\n  .then(() => {\n    return new Error('error!!!')\n  })\n  .then((res) => {\n    console.log('then: ', res)\n  })\n  .catch((err) => {\n    console.log('catch: ', err)\n  })\n题目七\n\nconst promise = Promise.resolve()\n  .then(() => {\n    return promise\n  })\npromise.catch(console.error)\n题目八\n\nPromise.resolve(1)\n  .then(2)\n  .then(Promise.resolve(3))\n  .then(console.log)\n题目九\n\nPromise.resolve()\n  .then(function success (res) {\n    throw new Error('error')\n  }, function fail1 (e) {\n    console.error('fail1: ', e)\n  })\n  .catch(function fail2 (e) {\n    console.error('fail2: ', e)\n  })\n题目十\n\nprocess.nextTick(() => {\n  console.log('nextTick')\n})\nPromise.resolve()\n  .then(() => {\n    console.log('then')\n  })\nsetImmediate(() => {\n  console.log('setImmediate')\n})\nconsole.log('end')\n结果\n\n执行结果及解释见我的知乎文章：https://zhuanlan.zhihu.com/p/30797777","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMTA5ODcxLCJleHAiOjE1MTAxNTMwNzF9.lRCbQQvDDi6f6EVx53Fmqq1DYD88b7DF1ICYjysFW6o","author":"qichangjun"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"创建成功\",\n  \"data\": null\n}"
*************** response log end ***************

[2017-11-08 10:59:53.075] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/getArticleLists
request client ip:  ::ffff:127.0.0.1
request body: 
{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMTA5ODcxLCJleHAiOjE1MTAxNTMwNzF9.lRCbQQvDDi6f6EVx53Fmqq1DYD88b7DF1ICYjysFW6o"}
response time: 4
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": [\n    {\n      \"_id\": \"5a0183c8ec9e0358be71b6b4\",\n      \"title\": \"JS基础题，却有多少人能弄清楚其中的奥义？\",\n      \"content\": \"let data = [1,2,3], i = 0;\\ndata[i++] = data[i++]*2;\\n问这个操作之后，data数组为多少？i的值是多少？(各1分) 为什么？(98分)\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 2,\n      \"creatDate\": \"2017-11-07T09:58:32.465Z\"\n    },\n    {\n      \"_id\": \"5a0183f2ec9e0358be71b6b5\",\n      \"title\": \"node源码粗读(1)：一个简单的nodejs文件从运行到结束都发生了什么\",\n      \"content\": \"os环境：macOS 10.12.5 ，ide:cLion，node版本：v8.0.0\\n\\n一、配置ide和node编译\\n\\n对ide的配置和node编译的过程这里不赘述了，如果有时间，可能写一篇blog简单介绍一下。\\n\\n二、node运行入口粗读\\n\\nnode入口集中在文件 node/src/node_main.cc中，让我们在node::Start这里搭一个断点，看看接下来都会发生什么。\\nissue5\\n\\n1. argc和argv\\n\\n这两个在之后的代码里会经常见到，argc表示的是命令行参数个数，而argv表示的是命令行的参数，如果没有参数那么就是node的运行的绝对地址\\n\\n2.platformInit运行\\n\\nnode运行的时候首先要走的便是platformInit方法，这个方法主要是对运行平台的一些参数进行初始化：\\nissue5\\n可以看到：首先有对信号的处理（sig*），还有对系统的stdin、stdout的检测（STDIN_FILENO，STDERR_FILENO），这里截图没截全，就不一一介绍了。\\n\\n3.调用node::performance::performance_node_start\\n\\n这里从字面就很好理解，开始对node性能进行记录，这里面有个要注意的地方是：它底层其实调用的是uv__hrtime。node有很多可以计算时间的方法，大家如果读读源码，就会发现，所有计算耗时的方法都绕不开这个api。\\n\\n4.调用uv_setup_args\\n\\n对uv_setup_args调用主要要解决的问题就是调用uv_malloc对argv的副本new_argv分配内存，并返回。说白了就是复制一份argv给process.title这个api用。\\n\\n5.调用Init方法\\n\\nInit(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\\n大家可以看到这个Init有四个参数，argc和argv刚才已经介绍过了，而后面两个参数分别给argc和argv加上了exec前缀，经过阅读就会发现，exec前缀就是待执行状态的argc和argv。在Init函数体内，主要做的事情有以下几个：\\n\\n开始计算node程序运行时间\\nprog_start_time = static_cast<double>(uv_now(uv_default_loop()));\\n通过调用uv_loop_configure，对libuv信号进行确认，包括：uv_loop_block_signal等\\n通过node::SafeGetenv 读取node环境相关的argv来建立node环境相关配置参数的链接，例如：\\nSafeGetenv(\\\"OPENSSL_CONF\\\", &openssl_config);\\nnode建立起openSSL_CONF，而这个CONF来自你的参数–openssl-config\\n\\n通过node::ProcessArgv读取node参数相关的并进行分配内存处理，例如 --version，–trace-warnings等\\n6.判断openSSL\\n\\n#if HAVE_OPENSSL\\n  {\\n    std::string extra_ca_certs;\\n    if (SafeGetenv(\\\"NODE_EXTRA_CA_CERTS\\\", &extra_ca_certs))\\n      crypto::UseExtraCaCerts(extra_ca_certs);\\n  }\\n这里没什么好说的，就是判断openSSL，如果有的话读取ca，为用openSSL通讯做准备。\\n\\n7. v8_platform.Initialize初始化\\n\\nv8_platform.Initialize，这里主要对libuv线程池做初始化操作。\\n\\n8.V8::Initialize()初始化\\n\\n接线来就是重头戏了，对v8进行初始化操作，其中又囊括了很多点，我在下面一一列出，里面一些概念也会在列出的时候提及一下：\\n\\n首先会调用CallOnce(OnceType* once, void (*init_func)())，它会通过原子操作的方法（Acquire_Load）来确认是否已经调用过，如果没有调用过则进入到CallOnceImpl并最终调用 init_func，这个函数只有在初始化的时候进行调用：\\n// @files ./deps/v8/src/base/once.h line 83\\ninline void CallOnce(OnceType* once, NoArgFunction init_func) {\\n  if (Acquire_Load(once) != ONCE_STATE_DONE) {\\n    CallOnceImpl(once, reinterpret_cast<PointerArgFunction>(init_func), NULL);\\n  }\\n}\\n在这里有一个比较重要的概念，就是OnceType，这是node作者定义的一种类型，如果翻一下源码可以翻到一个宏定义 V8_DECLARE_ONCE，这是专门用来声明OnceType类型的，对于只需要在创建的时候声明一次的都会定义为OnceType,通过全局搜索就很容易找出来OnceType:\\nissue5\\n\\nCallOnceImpl对v8进行初始化的时候需要调用如下api： issue5 v8::internal::V8::InitializeOncePerProcessImpl，这个函数通过名字就能很好理解，就是只在进程运行时候初始化一次的接口，也就是上述的OnceType，咱们接着往下看。\\n这个api里面首先调用的是base::OS::Initialize这个api，这里不做过多解释，就是对操作系统相关的东西做兼容初始化操作\\n接下来比较重要的api就是Isolate::InitializeOncePerProcess() 这个了，这是对v8运行环境isolate进行初始化的地方（并没有调用生成isolate，只是告诉程序在进程运行的时候需要对isolate做的一系列操作），里面主要做的操作有：初始化isolate锁；初始化线程、线程数据块、数据表地址。\\nsampler::Sampler::SetUp()，采样器在这里就不做过多分析了，就是创建一个线程采集v8的状态。\\n在init_func调用结束后会调用一下c++中的原子操作方法Release_Store（应该是针对于内存屏障进行原子写操作的一个api），将数据装到内存中指定位置：\\ninline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {\\n  __atomic_store_n(ptr, value, __ATOMIC_RELEASE);\\n}\\n9.调用node::performance::performance_v8_start\\n\\nnode::performance::performance_v8_start = PERFORMANCE_NOW();\\n这似曾相识的代码就不过多解释了，就是对v8进行性能记录，底层同样调用的uv_hrtime。\\n\\n10.调用内联Start\\n\\nissue5\\n环境搞定了，接下来就是开始运行咯。下面我们来看看这个start都做了哪些事情\\n\\n看到它第一个参数，就知道了，先初始化uv_default_loop，就不再过多解释了，有问题的可以翻翻libuv，很好理解，下面贴一下初始化的代码：\\n\\nuv_loop_t* uv_default_loop(void) {\\n  if (default_loop_ptr != NULL)\\n    return default_loop_ptr;\\n  if (uv_loop_init(&default_loop_struct))\\n    return NULL;\\n  default_loop_ptr = &default_loop_struct;\\n  return default_loop_ptr;\\n}\\n接下来是真正的start了，在这里贴一下代码，然后详细解释一下：\\n\\n Isolate::CreateParams params;\\n  ArrayBufferAllocator allocator;\\n  params.array_buffer_allocator = &allocator;\\n#ifdef NODE_ENABLE_VTUNE_PROFILING\\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\\n#endif\\n\\n  Isolate* const isolate = Isolate::New(params);\\n  if (isolate == nullptr)\\n    return 12;  // Signal internal error.\\n\\n  isolate->AddMessageListener(OnMessage);\\n  isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n  isolate->SetAutorunMicrotasks(false);\\n  isolate->SetFatalErrorHandler(OnFatalError);\\n第一行应该比较好理解，就是在isolate中创建参数，下面是params的列表： issue5\\nArrayBufferAllocator allocator这里是一个很重要的知识点，之前在Init的时候忘了提及了，node中buffer不会占用v8内存，而是开辟出的独立空间，这里就是声明之前Init时候封装好的ArrayBufferAllocator\\n解释一下这句代码：\\n isolate->AddMessageListener(OnMessage);\\n这句话表面上是给isolate添加监听，而如果你深入去研究的话就会发现，它是通过HandleScope来监听javascript对象内存的变化并发出相应的message。\\n\\n又是感觉似曾相识的代码，是不是经常在node中看到UncaughtException这几个字母，O(∩_∩)O\\nisolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);\\n这里要做的是对未捕获的异常进行监听（可能对libuv中的问题进行了监听，具体没有深入看，之后会进行确认）。\\n\\nisolate->SetAutorunMicrotasks(false); 这个我就不做过多解释了，microtask和marcotask应该大家都比较明白，不明白的可以随便翻翻资料或者看看libuv的event loop，很好理解。\\nisolate->SetFatalErrorHandler(OnFatalError);这个从字面意思上来看是对程序的致命错误进行处理，没有细看，感觉可以直接过。\\nissue5,这里贴一下图片，这样还能清晰看到边上clion的备注。Locker主要的作用是对当前的scope添加互斥锁。exit_code = Start 这里的Start有很多玄机，接下来我们单独开一章节详细剖析一下。\\n三、node执行过程中发生了什么\\n\\nissue5\\n\\n1.node::Environment::Start\\n\\nissue5\\n这个函数对node运行时候的环境做了初始化，其中初始化了大家非常熟悉的HandleScope，Context,下面还有对uv_idle_init以及uv_timer_init等初始化的操作，这里就不过多介绍了。\\n\\n2.async_hooks和LoadEnvironment\\n\\n接下来注意这段代码：\\n\\n    env.async_hooks()->push_async_ids(1, 0);\\n    LoadEnvironment(&env);\\n    env.async_hooks()->pop_async_id(1);\\n这里引入了一个新的概念就是async_hooks，从这段代码就能看出来async_hooks是如何记录整个生命周期的，因为他是在生命周期之前推入，而又是在生命周期之后推出的。\\n\\nLoadEnvironment则是整个运行时候的环境，接下来会讲解到LoadEnvironment到底都做了什么。\\n\\n3.node::LoadEnvironment\\n\\nvoid LoadEnvironment(Environment* env) {\\n  HandleScope handle_scope(env->isolate());\\n  TryCatch try_catch(env->isolate());\\n  try_catch.SetVerbose(false);\\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(),\\n                                                    \\\"bootstrap_node.js\\\");\\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\\n  if (try_catch.HasCaught())  {\\n    ReportException(env, try_catch);\\n    exit(10);\\n  }\\n  CHECK(f_value->IsFunction());\\n  Local<Function> f = Local<Function>::Cast(f_value);\\n  Local<Object> global = env->context()->Global();//创建Global\\n  //...\\n  try_catch.SetVerbose(true);\\n  env->SetMethod(env->process_object(), \\\"_rawDebug\\\", RawDebug);\\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \\\"global\\\"), global);\\n  Local<Value> arg = env->process_object();//创建process\\n  f->Call(Null(env->isolate()), 1, &arg);//通过bootstrap_node.js中的startup方法来调用本地node代码\\n}\\n在这里重点说一下很有名的bootstrap_node.js，这是外部js文件的入口，外部js文件进来之后要经过几个主要的步骤：通过vm.script 校验代码；通过preloadModules()预加载模块；通过module.rumMain()执行外部js文件。\\n\\n在内存分配的时候，有个小知识点，正好在这里提一下：\\n\\nbool large_object = size_in_bytes > kMaxRegularHeapObjectSize;\\n  HeapObject* object = nullptr;\\n  AllocationResult allocation;\\n  if (NEW_SPACE == space) {\\n    if (large_object) {\\n      space = LO_SPACE;\\n    } else {\\n      allocation = new_space_->AllocateRaw(size_in_bytes, alignment);\\n      if (allocation.To(&object)) {\\n        OnAllocationEvent(object, size_in_bytes);\\n      }\\n      return allocation;\\n    }\\n  }\\n大家可以注意一下这段代码，相信懂英文的人都能看懂，这里是对大对象进行判断，如果字节超过kMaxRegularHeapObjectSize则会被分配到LO_SPACE中。在这里给大家解释一下这个space，node中做堆内存分配的space细分总共五类，分别是：\\n\\nLO_SPACE（存放大对象）\\nNEW_SPACE（能被copying collector复制收集法收集的内存，主要是未被回收过的，为什么叫复制收集请自行查阅Scavenge算法）\\nOLD_SPACE（主要存放的是对NEW_SPACE的指针以及NEW_SPACE迁移过来的对象）\\nCODE_SPACE（存放经过turbofan优化后的指令对象）\\nMAP_SPACE（主要用于存放map）\\n还有游离于这几类之外的UNREACHABLE（容错处理，不做讨论）\\n其中NEW_SPACE的内存是连续的，OLD_SPACE和MAP_SAPCE则是基于页进行管理的，存放不下的话会不断新加内存页进来，直到max_size。LO_SPACE则是有单独的存储空间，也是基于页进行管理（所以粗分其实只有三类）。 下面贴一部分OLD_SPACE内存分配代码：\\nint paged_space_count = LAST_PAGED_SPACE - FIRST_PAGED_SPACE + 1;\\n  initial_max_old_generation_size_ = max_old_generation_size_ =\\n      Max(static_cast<size_t>(paged_space_count * Page::kPageSize),\\n          max_old_generation_size_);\\n//其中 kPageSize 定义如下\\nclass MemoryChunk{\\n  public:\\n    //省略\\n    static const int kPageSize = 1 << kPageSizeBits;//kPageSizeBits 与操作系统内存页大小有关\\n    //省略\\n}\\nclass Page : public MemoryChunk{\\n//省略\\n}\\n还有一个知识点，就是node内置模块是如何加载的，在这里不做展开讨论了，网上资料很多，请自行查阅。\\n\\n四、运行结束\\n\\n运行结束之后的工作就做过多解释了，大家简单看下代码直接过了，无非是一些扫尾的工作：\\n\\nif (trace_enabled) {\\n    v8_platform.StopTracingAgent();\\n  }\\n  v8_initialized = false;\\n  V8::Dispose();\\n  v8_platform.Dispose();\\n\\n  delete[] exec_argv;\\n  exec_argv = nullptr;\\n五、总结\\n\\n至此，整体流程也就大致清晰了，文章比较干，还是希望大家真正上手调试走一遍流程，看一下代码，这样印象才能更深刻，如果文章中有说的不正确的地方，也请大神在评论中进行指正。\\nby 小菜\",\n      \"author\": \"admin\",\n      \"__v\": 0,\n      \"replyList\": [\n        {\n          \"userName\": \"admin\",\n          \"content\": \"好，测试测试\",\n          \"_id\": \"5a018409ec9e0358be71b6b6\",\n          \"replyChildList\": [],\n          \"replyTime\": \"2017-11-07T09:59:37.197Z\"\n        }\n      ],\n      \"viewed\": 4,\n      \"creatDate\": \"2017-11-07T09:59:14.294Z\"\n    },\n    {\n      \"_id\": \"5a0273281454aa15ea3fc088\",\n      \"title\": \"Promise 必知必会（十道题）\",\n      \"content\": \"Promise 想必大家十分熟悉，想想就那么几个 api，可是你真的了解 Promise 吗？本文根据 Promise 的一些知识点总结了十道题，看看你能做对几道。\\n\\n题目一\\n\\nconst promise = new Promise((resolve, reject) => {\\n  console.log(1)\\n  resolve()\\n  console.log(2)\\n})\\npromise.then(() => {\\n  console.log(3)\\n})\\nconsole.log(4)\\n题目二\\n\\nconst promise = new Promise((resolve, reject) => {\\n  setTimeout(() => {\\n    resolve('success')\\n  }, 1000)\\n})\\nconsole.log(promise)\\npromise\\n  .then(() => {\\n    console.log(promise)\\n    throw new Error('error!!!')\\n  })\\n  .catch(err => {\\n    console.log(promise)\\n  })\\n题目三\\n\\nconst promise = new Promise((resolve, reject) => {\\n  resolve('success1')\\n  reject('error')\\n  resolve('success2')\\n})\\n\\npromise\\n  .then((res) => {\\n    console.log('then: ', res)\\n  })\\n  .catch((err) => {\\n    console.log('catch: ', err)\\n  })\\n题目四\\n\\nPromise.resolve(1)\\n  .then((res) => {\\n    console.log(res)\\n    return 2\\n  })\\n  .catch((err) => {\\n    return 3\\n  })\\n  .then((res) => {\\n    console.log(res)\\n  })\\n题目五\\n\\nconst promise = new Promise((resolve, reject) => {\\n  setTimeout(() => {\\n    console.log('once')\\n    resolve('success')\\n  }, 1000)\\n})\\n\\nconst start = Date.now()\\npromise.then((res) => {\\n  console.log(res, Date.now() - start)\\n})\\npromise.then((res) => {\\n  console.log(res, Date.now() - start)\\n})\\n题目六\\n\\nPromise.resolve()\\n  .then(() => {\\n    return new Error('error!!!')\\n  })\\n  .then((res) => {\\n    console.log('then: ', res)\\n  })\\n  .catch((err) => {\\n    console.log('catch: ', err)\\n  })\\n题目七\\n\\nconst promise = Promise.resolve()\\n  .then(() => {\\n    return promise\\n  })\\npromise.catch(console.error)\\n题目八\\n\\nPromise.resolve(1)\\n  .then(2)\\n  .then(Promise.resolve(3))\\n  .then(console.log)\\n题目九\\n\\nPromise.resolve()\\n  .then(function success (res) {\\n    throw new Error('error')\\n  }, function fail1 (e) {\\n    console.error('fail1: ', e)\\n  })\\n  .catch(function fail2 (e) {\\n    console.error('fail2: ', e)\\n  })\\n题目十\\n\\nprocess.nextTick(() => {\\n  console.log('nextTick')\\n})\\nPromise.resolve()\\n  .then(() => {\\n    console.log('then')\\n  })\\nsetImmediate(() => {\\n  console.log('setImmediate')\\n})\\nconsole.log('end')\\n结果\\n\\n执行结果及解释见我的知乎文章：https://zhuanlan.zhihu.com/p/30797777\",\n      \"author\": \"qichangjun\",\n      \"__v\": 0,\n      \"replyList\": [],\n      \"viewed\": 0,\n      \"creatDate\": \"2017-11-08T02:59:52.646Z\"\n    }\n  ]\n}"
*************** response log end ***************

[2017-11-08 10:59:54.254] [INFO] resLogger - 
*************** response log start ***************
request method: POST
request originalUrl:  /api/art/updateCheckTimes
request client ip:  ::ffff:127.0.0.1
request body: 
{"id":"5a0273281454aa15ea3fc088","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNTlmYmUwZjVjZTg4MDkwN2MyMGI1OWNlIiwiaWF0IjoxNTEwMTA5ODcxLCJleHAiOjE1MTAxNTMwNzF9.lRCbQQvDDi6f6EVx53Fmqq1DYD88b7DF1ICYjysFW6o"}
response time: 6
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0273281454aa15ea3fc088\",\n    \"title\": \"Promise 必知必会（十道题）\",\n    \"content\": \"Promise 想必大家十分熟悉，想想就那么几个 api，可是你真的了解 Promise 吗？本文根据 Promise 的一些知识点总结了十道题，看看你能做对几道。\\n\\n题目一\\n\\nconst promise = new Promise((resolve, reject) => {\\n  console.log(1)\\n  resolve()\\n  console.log(2)\\n})\\npromise.then(() => {\\n  console.log(3)\\n})\\nconsole.log(4)\\n题目二\\n\\nconst promise = new Promise((resolve, reject) => {\\n  setTimeout(() => {\\n    resolve('success')\\n  }, 1000)\\n})\\nconsole.log(promise)\\npromise\\n  .then(() => {\\n    console.log(promise)\\n    throw new Error('error!!!')\\n  })\\n  .catch(err => {\\n    console.log(promise)\\n  })\\n题目三\\n\\nconst promise = new Promise((resolve, reject) => {\\n  resolve('success1')\\n  reject('error')\\n  resolve('success2')\\n})\\n\\npromise\\n  .then((res) => {\\n    console.log('then: ', res)\\n  })\\n  .catch((err) => {\\n    console.log('catch: ', err)\\n  })\\n题目四\\n\\nPromise.resolve(1)\\n  .then((res) => {\\n    console.log(res)\\n    return 2\\n  })\\n  .catch((err) => {\\n    return 3\\n  })\\n  .then((res) => {\\n    console.log(res)\\n  })\\n题目五\\n\\nconst promise = new Promise((resolve, reject) => {\\n  setTimeout(() => {\\n    console.log('once')\\n    resolve('success')\\n  }, 1000)\\n})\\n\\nconst start = Date.now()\\npromise.then((res) => {\\n  console.log(res, Date.now() - start)\\n})\\npromise.then((res) => {\\n  console.log(res, Date.now() - start)\\n})\\n题目六\\n\\nPromise.resolve()\\n  .then(() => {\\n    return new Error('error!!!')\\n  })\\n  .then((res) => {\\n    console.log('then: ', res)\\n  })\\n  .catch((err) => {\\n    console.log('catch: ', err)\\n  })\\n题目七\\n\\nconst promise = Promise.resolve()\\n  .then(() => {\\n    return promise\\n  })\\npromise.catch(console.error)\\n题目八\\n\\nPromise.resolve(1)\\n  .then(2)\\n  .then(Promise.resolve(3))\\n  .then(console.log)\\n题目九\\n\\nPromise.resolve()\\n  .then(function success (res) {\\n    throw new Error('error')\\n  }, function fail1 (e) {\\n    console.error('fail1: ', e)\\n  })\\n  .catch(function fail2 (e) {\\n    console.error('fail2: ', e)\\n  })\\n题目十\\n\\nprocess.nextTick(() => {\\n  console.log('nextTick')\\n})\\nPromise.resolve()\\n  .then(() => {\\n    console.log('then')\\n  })\\nsetImmediate(() => {\\n  console.log('setImmediate')\\n})\\nconsole.log('end')\\n结果\\n\\n执行结果及解释见我的知乎文章：https://zhuanlan.zhihu.com/p/30797777\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [],\n    \"viewed\": 1,\n    \"creatDate\": \"2017-11-08T02:59:52.646Z\"\n  }\n}"
*************** response log end ***************

[2017-11-08 10:59:54.256] [INFO] resLogger - 
*************** response log start ***************
request method: GET
request originalUrl:  /api/art/getArticleDetail?id=5a0273281454aa15ea3fc088
request client ip:  ::ffff:127.0.0.1
request query:  {"id":"5a0273281454aa15ea3fc088"}
response time: 5
response status: 200
response body: 
"{\n  \"code\": 1,\n  \"message\": \"操作成功\",\n  \"data\": {\n    \"_id\": \"5a0273281454aa15ea3fc088\",\n    \"title\": \"Promise 必知必会（十道题）\",\n    \"content\": \"Promise 想必大家十分熟悉，想想就那么几个 api，可是你真的了解 Promise 吗？本文根据 Promise 的一些知识点总结了十道题，看看你能做对几道。\\n\\n题目一\\n\\nconst promise = new Promise((resolve, reject) => {\\n  console.log(1)\\n  resolve()\\n  console.log(2)\\n})\\npromise.then(() => {\\n  console.log(3)\\n})\\nconsole.log(4)\\n题目二\\n\\nconst promise = new Promise((resolve, reject) => {\\n  setTimeout(() => {\\n    resolve('success')\\n  }, 1000)\\n})\\nconsole.log(promise)\\npromise\\n  .then(() => {\\n    console.log(promise)\\n    throw new Error('error!!!')\\n  })\\n  .catch(err => {\\n    console.log(promise)\\n  })\\n题目三\\n\\nconst promise = new Promise((resolve, reject) => {\\n  resolve('success1')\\n  reject('error')\\n  resolve('success2')\\n})\\n\\npromise\\n  .then((res) => {\\n    console.log('then: ', res)\\n  })\\n  .catch((err) => {\\n    console.log('catch: ', err)\\n  })\\n题目四\\n\\nPromise.resolve(1)\\n  .then((res) => {\\n    console.log(res)\\n    return 2\\n  })\\n  .catch((err) => {\\n    return 3\\n  })\\n  .then((res) => {\\n    console.log(res)\\n  })\\n题目五\\n\\nconst promise = new Promise((resolve, reject) => {\\n  setTimeout(() => {\\n    console.log('once')\\n    resolve('success')\\n  }, 1000)\\n})\\n\\nconst start = Date.now()\\npromise.then((res) => {\\n  console.log(res, Date.now() - start)\\n})\\npromise.then((res) => {\\n  console.log(res, Date.now() - start)\\n})\\n题目六\\n\\nPromise.resolve()\\n  .then(() => {\\n    return new Error('error!!!')\\n  })\\n  .then((res) => {\\n    console.log('then: ', res)\\n  })\\n  .catch((err) => {\\n    console.log('catch: ', err)\\n  })\\n题目七\\n\\nconst promise = Promise.resolve()\\n  .then(() => {\\n    return promise\\n  })\\npromise.catch(console.error)\\n题目八\\n\\nPromise.resolve(1)\\n  .then(2)\\n  .then(Promise.resolve(3))\\n  .then(console.log)\\n题目九\\n\\nPromise.resolve()\\n  .then(function success (res) {\\n    throw new Error('error')\\n  }, function fail1 (e) {\\n    console.error('fail1: ', e)\\n  })\\n  .catch(function fail2 (e) {\\n    console.error('fail2: ', e)\\n  })\\n题目十\\n\\nprocess.nextTick(() => {\\n  console.log('nextTick')\\n})\\nPromise.resolve()\\n  .then(() => {\\n    console.log('then')\\n  })\\nsetImmediate(() => {\\n  console.log('setImmediate')\\n})\\nconsole.log('end')\\n结果\\n\\n执行结果及解释见我的知乎文章：https://zhuanlan.zhihu.com/p/30797777\",\n    \"author\": \"qichangjun\",\n    \"__v\": 0,\n    \"replyList\": [],\n    \"viewed\": 1,\n    \"creatDate\": \"2017-11-08T02:59:52.646Z\"\n  }\n}"
*************** response log end ***************

